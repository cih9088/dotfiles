#!/usr/bin/env bash

set -euo pipefail
trap "echo 'error: Script failed: see failed command above'" ERR

Color_Off='[0m'       # Text Reset
BRed='[1;31m'         # Red
BGreen='[1;32m'       # Green
Yellow='[0;33m'       # Yellow
BIYellow='[1;93m'     # Yellow

OPTIND=1
INLINE=false
ASKPASS=''


case "$OSTYPE" in
    solaris*) platform="SOLARIS" ;;
    darwin*)  platform="OSX" ;;
    linux*)   platform="LINUX" ;;
    bsd*)     platform="BSD" ;;
    msys*)    platform="WINDOWS" ;;
    *)        platform="unknown: $OSTYPE" ;;
esac

usage() {
    LESS=-FEXR less <<HELP

${BRed}SYNOPSIS${Color_Off}
    ${BRed}$(basename "$0")${Color_Off} [${BRed}-iAh${Color_Off}] ${BGreen}hosts_file${Color_Off} ${BGreen}command...${Color_Off}


${BRed}DESCRIPTION${Color_Off}
    ${BRed}pssh${Color_Off} with easy


${BRed}OPTIONS${Color_Off}
    ${BRed}-i${Color_Off}
        display stdout and stderr as each host completes
        if this option is not specified, stdout goes to pssh_outdir and stderr goes to pssh_errdir

    ${BRed}-A${Color_Off}
        Prompt for a password and pass it to ssh.  The  password  may  be  used  for
        either  to  unlock  a  key  or for password authentication.  The password is
        transferred in a fairly secure manner (e.g., it will not show up in argument
        lists).  However, be aware that a root user on your system could potentially
        intercept the password.

    ${BRed}-h${Color_Off}
        show this help message

HELP
}

while getopts 'hiA' option; do
    case "$option" in
        h) usage
            exit
            ;;
        A) ASKPASS='-A'
            ;;
        i) INLINE=true
            ;;
        :) printf "missing argument for -%s\n" "$OPTARG" >&2
            echo "" >&2
            usage >&2
            exit 1
            ;;
        \?) printf "ilegal option: -%s\n" "$OPTARG" >&2
            echo "" >&2
            usage >&2
            exit 1
            ;;
    esac
done
shift $((OPTIND -1))
[ "${1:-}" = "--" ] && shift

err() {
  printf "${BRed}%s${Color_Off}\n" "$*" >&2
}

has() {
    local verbose=0
    if [[ $1 = '-v' ]]; then
        verbose=1
        shift
    fi
    for c; do c="${c%% *}"
        if ! command -v "$c" &> /dev/null; then
            (( verbose > 0 )) && err "$c not found"
            return 1
        fi
    done
}

easy-pssh() { # Easy pssh command
    local hosts_file="$1"; shift
    local cmd="$@"
    local n_host=$(wc -l < ${hosts_file})

    if [ ${INLINE} == false ]; then
        local tmpdir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')
    fi

    sudo=$(echo $cmd | awk '{print $1}')

    if [[ $sudo == 'sudo' ]]; then
        echo "Enter the sudo passwd for the remote user: "
        read -s pswd

        if [[ ${INLINE} == true ]]; then
            echo "$pswd" | pssh -p ${n_host} -t 0 -h ${hosts_file} ${ASKPASS} -i -I "sudo -S -- sh -c '$cmd'"
        else
            echo "${Yellow}[${BIYellow}logdir${Yellow}]${Color_Off} ${tmpdir}"
            echo
            echo "$pswd" | pssh -p ${n_host} -t 0 -h ${hosts_file} ${ASKPASS} -o ${tmpdir}/pssh_outdir -e ${tmpdir}/pssh_errdir -I "sudo -S -- sh -c '$cmd'"
        fi
    else
        if [[ ${INLINE} == true ]]; then
            pssh -p ${n_host} -h ${hosts_file} ${ASKPASS} -t 0 -i "$cmd"
        else
            echo "${Yellow}[${BIYellow}logdir${Yellow}]${Color_Off} ${tmpdir}"
            echo
            pssh -p ${n_host} -h ${hosts_file} -t 0 ${ASKPASS} -o ${tmpdir}/pssh_outdir -e ${tmpdir}/pssh_errdir "$cmd"
        fi
    fi
}

has -v pssh || exit 1

easy-pssh $@

