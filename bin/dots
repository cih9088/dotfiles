#!/usr/bin/env bash

set -eu

_DIR="$(cd "$(dirname $(readlink -f "${BASH_SOURCE[0]}"))" >/dev/null && pwd)"

DOTS_ROOT="${_DIR}/.."
_SCRIPT_DIR="${DOTS_ROOT}/script"

. "${_SCRIPT_DIR}/helpers/functions.sh"

DOTS_COMMAND=${DOTS_COMMAND:-skip}
DOTS_TARGETS=${DOTS_TARGETS:-}
DOTS_MODE=${DOTS_MODE:-}
DOTS_VERSION=${DOTS_VERSION:-}
DOTS_YES=${DOTS_YES:-}
DOTS_SKIP_DEPENDENCIES=${DOTS_SKIP_DEPENDENCIES:-}

VERBOSE=${VERBOSE:-false}
CONFIG=${CONFIG:-}
GH_ACCESS=${GH_ACCESS:-}
PREFIX=${PREFIX:-$HOME/.local}

PKG_APPS_WITH_HELP=(
  "zsh"           "z shell"
  "fish"          "fish shell"
  "prezto"        "framework for zsh"
  "neovim"        "hyperextensible Vim-based text editor"
  "tmux"          "terminal multiplexer"
  "tpm"           "tmux plugin manager"
  "wget"          "non-interactive network downloader"
  "tree"          "list contents of directories in an tree-like format"
  "fd"            "find entries in the filesystem"
  "rg"            "recursively search"
  "thefuck"       "command corrector"
  "tldr"          "too long didnt read"
  "bash-snippets" "bash utils"
  "up"            "tool for writing linux pipeline"
  "jq"            "json parser"
  "sox"           "sound exchange"
  "tcpdump"       "dump traffic on a network"
  "pyenv"         "python version maanger"
  "goenv"         "golang version manager"
  "asdf"          "runtime version manager"
  "mise"          "runtime version manager"
  "pandoc"        "universal document converter"
  "btop"          "resource monitor"
)

PKG_DOTS_WITH_HELP=(
  "bins"             "custom scripts and commands"
  "configs"          "custom configs"
  "tmux-plugins"     "tmux plugins"
  "neovim-plugins"   "neovim plugins"
  "neovim-providers" "neovim providers"
)

PKG_LIBS_WITH_HELP=(
  "terminfo"      "terminal database"
  "pkg-config"    "package metainformation"
  "help2man"      "simple man page generator"
  "patch"         "diff file applier"
  "ncurses"       "library to write text-based user interface"
  "readline"      "library providing inline editing and history for interactive programs"
  "gettext"       "internationalization and localization system"
  "cmake"         "cross-platform program for build automation, etc"
  "zlib"          "library for data compression"
  "bzip2"         "compression based on Burrows-Wheeler algorithm"
  "unzip"         "decompress zip file"
  "gzip"          "compression"
  "xz"            "lossless compression based on the LZMA algorithm"
  "sqlite3"       "database engine written in the C"
  "libffi"        "foreign function interface library"
  "openssl"       "secure communications library"
  "autotools"     "GNU build system"
  "gnutls"        "implementation of the TLS, SSL, and DTLS protocols"
  "gnupg"         "GNU privacy guard"
  "openldap"      "open-source implementation of the LDAP protocol"
  # "tcl"           "tcl"
  # "tk"            "tk"
  # "libx11"        "libx11"
  "libjpeg-turbo" "JPEG codec using SIMD instructions"
  "opencv"        "real-time computer vision library"
  "openmpi"       "high performance message passing implementation"
)

PKG_ENVS_WITH_HELP=(
  "python"                 "python"
  "python-env"             "python environments"
  "python-env--virtualenv" "python virtual environment"
  "python-env--black"      "python formatter"
  "python-env--isort"      "import formatter"
  "python-env--flake8"     "python linter"
  "python-env--debugpy"    "debug adapter protocol for python"
  "golang"                 "golang"
  "rust"                   "rust"
  "nodejs"                 "nodejs"
  "nodejs-env"             "nodejs environments"
  "lua"                    "lua"
  "lua-env"                "lua environments"
  "lua-env--stylua"        "lua formatter"
  "sh-env"                 "shell environments"
  "sh-env--shellcheck"     "shell linter"
  "sh-env--shfmt"          "shell formatter"
  "perl"                   "perl"
)


PKG_APPS=()
idx=0
while [ $idx -lt ${#PKG_APPS_WITH_HELP[@]} ]; do
  PKG_APPS+=("${PKG_APPS_WITH_HELP[$idx]}")
  idx=$(( $idx + 2 ))
done
PKG_DOTS=()
idx=0
while [ $idx -lt ${#PKG_DOTS_WITH_HELP[@]} ]; do
  PKG_DOTS+=("${PKG_DOTS_WITH_HELP[$idx]}")
  idx=$(( $idx + 2 ))
done
PKG_LIBS=()
idx=0
while [ $idx -lt ${#PKG_LIBS_WITH_HELP[@]} ]; do
  PKG_LIBS+=("${PKG_LIBS_WITH_HELP[$idx]}")
  idx=$(( $idx + 2 ))
done
PKG_ENVS=()
idx=0
while [ $idx -lt ${#PKG_ENVS_WITH_HELP[@]} ]; do
  PKG_ENVS+=("${PKG_ENVS_WITH_HELP[$idx]}")
  idx=$(( $idx + 2 ))
done

PKGS=( "${PKG_APPS[@]}" "${PKG_DOTS[@]}" "${PKG_ENVS[@]}" "${PKG_LIBS[@]}")


simple_usage() {
  cat <<EOF

Usage:
  $(basename "$0") {COMMAND} [OPTIONS] [TARGET...]

Commands:
  list      List available targets
  install   Install targets
  update    Update targets
  remove    Remove targets

Options:
  -m, --mode                 Specify mode
  -t, --version              Specify version to install
  -y, --yes                  Do not prompt for confirmation
  -s, --skip-dependencies    Skip dependencies
  -v, --verbose              Verbose output
  -h, --help                 Show help message

EOF
}


usage() {
  local CMD=cat
  if has less; then
    CMD=less
  fi

  LESS=-FEXR $CMD <<HELP

${BOLD}${RED}SYNOPSIS${NC}
    ${BOLD}${RED}$(basename "$0")${NC} ${BOLD}${GREEN}COMMAND${NC} [${BOLD}${RED}-yvs${NC}] \
[${BOLD}${RED}-m ${GREEN}mode${NC}] [${BOLD}${RED}-c ${GREEN}config${NC}] \
[${BOLD}${RED}-t ${GREEN}version${NC}] \
[${BOLD}${GREEN}target${NC}...]


${BOLD}${RED}DESCRIPTION${NC}
    dotfile management tool


${BOLD}${RED}COMMANDS${NC}
    ${BOLD}${RED}Management Commands:${NC}
        ${BOLD}${RED}list, l${NC}
            List available targets.

        ${BOLD}${RED}install, i${NC} ${BOLD}${GREEN}target${NC}
            Install ${BOLD}${GREEN}target${NC}.

        ${BOLD}${RED}update, u${NC} ${BOLD}${GREEN}target${NC}
            Update ${BOLD}${GREEN}target${NC}.

        ${BOLD}${RED}remove, r${NC} ${BOLD}${GREEN}target${NC}
            Remove ${BOLD}${GREEN}target${NC}.

    ${BOLD}${RED}Utility Commands:${NC}
        ${BOLD}${RED}test-prerequisites${NC}
            Test prerequisites.

        ${BOLD}${RED}init-prerequisites${NC}
            Initialise prerequisites. This command requires privilege.

        ${BOLD}${RED}change-shell${NC}
            Change default shell to zsh/fish.


${BOLD}${RED}OPTIONS${NC}
    ${BOLD}${RED}-m, --mode${NC} ${BOLD}${GREEN}mode${NC}
        Specify mode for ${BOLD}target${NC} and do not prompt for it.

        ${BOLD}local${NC}   manage target without sudo
        ${BOLD}system${NC}  manage target with sudo

    ${BOLD}${RED}-t, --version${NC} ${BOLD}${GREEN}version_to_install${NC}
        Specify a version to install. It supports ${BOLD}local${NC} mode only.
        If not specified and --yes option is not given, it will list available versions to choose.
        If not specified and --yes option is given, version will be set to ${BOLD}latest${NC}.

    ${BOLD}${RED}-y, --yes${NC}
        Do not prompt for confirmation
        If the command is ${BOLD}install${NC} or ${BOLD}update${NC} and mode is ${BOLD}local${NC},
        target with version ${BOLD}latest${NC} would be installed.

    ${BOLD}${RED}-s, --skip-dependencies${NC}
        Skip all dependencies ${BOLD}target${NC} depends on.

    ${BOLD}${RED}-v, --verbose${NC}
        Verbose output.

    ${BOLD}${RED}-c, --config${NC} ${BOLD}${GREEN}yaml_file${NC}
        Configuration file in yaml.

    ${BOLD}${RED}-h, --help${NC}
        Show this help message.

HELP
}

completion_zsh() {
  cat <<EOF
PKG_DOTS_WITH_HELP=($(printf " %q" "${PKG_DOTS_WITH_HELP[@]}"))
PKG_APPS_WITH_HELP=($(printf " %q" "${PKG_APPS_WITH_HELP[@]}"))
PKG_ENVS_WITH_HELP=($(printf " %q" "${PKG_ENVS_WITH_HELP[@]}"))
PKG_LIBS_WITH_HELP=($(printf " %q" "${PKG_LIBS_WITH_HELP[@]}"))

to_alternative() {
  local ARR=("\$@")
  local start_idx=1 #zsh starts array from index of 1

  out="(("
  idx=\$start_idx
  while [ \$idx -lt \${#ARR[@]} ]; do
    cmd=\${ARR[\$idx]}
    desc=\${ARR[\$((\$idx + 1))]}
    out="\$out\$cmd\:\"\$desc\" "
    idx=\$(( \$idx + 2 ))
  done
  out="\$out))"
  echo "\$out"
}

packages() {
  _alternative 'dots:dotfiles:'"\$(to_alternative "\${PKG_DOTS_WITH_HELP[@]}")"
  _alternative 'apps:applications:'"\$(to_alternative "\${PKG_APPS_WITH_HELP[@]}")"
  _alternative 'libs:libraries:'"\$(to_alternative "\${PKG_LIBS_WITH_HELP[@]}")"
  _alternative 'envs:environments:'"\$(to_alternative "\${PKG_ENVS_WITH_HELP[@]}")"
}

options() {
  local command="\$1"
  local -a options

  options=(
    --yes'[do not prompt for confirmation]'
    --verbose'[verbose output]'
    --config'[configuration file]:filename:_files -g \*.\(yaml\|yml\)'
    --mode'[mode to manage targets]:mode:(system local)'
  )

  if [[ \$command == "install" || \$command == "update" ]]; then
    options+=(
      --skip-dependencies'[skip dependencies for local mode]'
      --version'[specify version to install or update]:version:'
    )
  fi

  _arguments -s -w "\$options[@]"
}

_dots() {
  local state line

  _arguments \
    --help'[show help message]: :->done' \
    '1:command:->commands' \
    '*::arg:->args'

  case "\$state" in
    done)
      ;;
    commands)
      local commands; commands=(
        'install: install targets'
        'update: update targets'
        'remove: remove targets'
        'list: list targets'
        'test-prerequisites: test prerequisites'
        'init-prerequisites: init prerequisites'
        'change-shell: change default shell'
        'completion: auto completion'
      )
      _describe -t commands 'command' commands
      ;;
    args)
      case "\$line[1]" in
        completion)
          if [ \$#line[@] -le 2 ]; then
            local -a _shells
            _shells=('zsh')
            _describe 'shell' _shells
          fi
          ;;
        install)
          options "install"
          packages
          ;;
        update)
          options "update"
          packages
          ;;
        remove)
          options "remove"
          packages
          ;;
        *)
          ;;
      esac
      ;;
  esac
}

compdef _dots dots
EOF
}

show_list() {
  local group="${1:-}"

  if [[ " apps libs envs dots " != *" $group "* ]]; then
    group=""
  fi

  if [ -z "$group" ] || [ "$group" = "dots" ]; then
    echo
    echo "Available ${BOLD}${RED}dots${NC} to manage:"
    idx=0
    while [ $idx -lt ${#PKG_DOTS_WITH_HELP[@]} ]; do
      echo "- ${PURPLE}${PKG_DOTS_WITH_HELP[$idx]}${NC}: ${PKG_DOTS_WITH_HELP[$(($idx + 1))]}"
      idx=$(( $idx + 2 ))
    done
  fi
  if [ -z "$group" ] || [ "$group" = "apps" ]; then
    echo
    echo "Available ${BOLD}${RED}apps${NC} to manage:"
    idx=0
    while [ $idx -lt ${#PKG_APPS_WITH_HELP[@]} ]; do
      echo "- ${PURPLE}${PKG_APPS_WITH_HELP[$idx]}${NC}: ${PKG_APPS_WITH_HELP[$(($idx + 1))]}"
      idx=$(( $idx + 2 ))
    done
  fi
  if [ -z "$group" ] || [ "$group" = "libs" ]; then
    echo
    echo "Available ${BOLD}${RED}libs${NC} to manage:"
    idx=0
    while [ $idx -lt ${#PKG_LIBS_WITH_HELP[@]} ]; do
      echo "- ${PURPLE}${PKG_LIBS_WITH_HELP[$idx]}${NC}: ${PKG_LIBS_WITH_HELP[$(($idx + 1))]}"
      idx=$(( $idx + 2 ))
    done
  fi
  if [ -z "$group" ] || [ "$group" = "envs" ]; then
    echo
    echo "Available ${BOLD}${RED}envs${NC} to manage:"
    idx=0
    while [ $idx -lt ${#PKG_ENVS_WITH_HELP[@]} ]; do
      echo "- ${PURPLE}${PKG_ENVS_WITH_HELP[$idx]}${NC}: ${PKG_ENVS_WITH_HELP[$(($idx + 1))]}"
      idx=$(( $idx + 2 ))
    done
  fi

}


make_wrapper() {
  pushd "${DOTS_ROOT}" >/dev/null 2>&1 || exit $?
  make "$@"
  popd >/dev/null 2>&1 || exit $?
}



POSITIONAL_ARGS=()
while [[ $# -gt 0 ]]; do
  # make it also '=' separated arguments
  [[ $1 == --*=* ]] && set -- "${1%%=*}" "${1#*=}" "${@:2}"
  key="$1"

  if [[ $key != --* ]] && [[ $key == -* ]]; then
    key=${key/-/}
    tmp=()
    while read -n 1 c; do tmp+=(-$c); done <<< "$key"
    unset tmp[${#tmp[@]}-1]
    key=${tmp[0]}
    if [ ${#tmp[@]} -gt 0 ]; then
      unset tmp[0]
      set -- "$@" ${tmp[@]:-}
    fi
  fi

  case $key in
    -m | --mode)
      DOTS_MODE="$2"
      if [[ "local system debug"  != *"${DOTS_MODE}"* ]]; then
        log_error "mode must be either 'local' or 'system'"
        exit 1
      fi
      shift; shift
      ;;
    -y | --yes)
      DOTS_YES=true
      shift
      ;;
    -c | --config)
      CONFIG="$2"
      DOTS_YES=true
      shift; shift
      ;;
    -t | --version)
      DOTS_VERSION="$2"
      shift; shift
      ;;
    -v | --verbose)
      VERBOSE=true
      shift
      ;;
    -s|--skip-dependencies)
      DOTS_SKIP_DEPENDENCIES=true
      shift
      ;;
    -h | --help)
      usage
      exit 0
      ;;
    -* | --*)
      log_error "Unknown option $1"
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1")
      shift
      ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

if [ $# -eq 0 ]; then
  simple_usage
  exit 1
fi
DOTS_COMMAND="${1}"
shift

# alias
[ "$DOTS_COMMAND" == "l" ] && DOTS_COMMAND=list
[ "$DOTS_COMMAND" == "i" ] && DOTS_COMMAND=install
[ "$DOTS_COMMAND" == "r" ] && DOTS_COMMAND=remove
[ "$DOTS_COMMAND" == "u" ] && DOTS_COMMAND=update


case $DOTS_COMMAND in
  list)
    show_list "${1:-}"
    exit 0
    ;;
  completion)
    _shell="${1:-}"
    [ "$_shell" = "zsh" ] && completion_zsh && exit 0
    log_error "$_shell is not a valid option."
    exit 1
    ;;
  change-shell)
    make_wrapper changeShell
    exit 0
    ;;
  test-prerequisites)
    make_wrapper prerequisitesTest
    exit 0
    ;;
  init-prerequisites)
    make_wrapper prerequisites
    exit 0
    ;;
  install|remove|update)
    ;;
  *)
    log_error "Unknown command '$DOTS_COMMAND'"
    simple_usage
    exit 1
    ;;
esac

# parse config
if [ -n "${CONFIG}" ]; then
  if [ "$#" -gt 0 ]; then
    log_error "target should not be specified if config is given."
    exit 1
  fi
  if [ ! -f "${CONFIG}" ]; then
    log_error "$CONFIG not found."
    exit 1
  fi
  CONFIG=$(readlink -f $CONFIG)
  eval $(${_SCRIPT_DIR}/helpers/parser_yaml ${CONFIG} "CONFIG_")
  DOTS_TARGETS=("${CONFIG_TARGETS[@]}")
else
  DOTS_TARGETS=($@)
fi


if [ ${#DOTS_TARGETS[@]} -eq 0 ]; then
  log_error "Please provide targets."
  exit 1
fi

for target in "${DOTS_TARGETS[@]}"; do
  if [[ " ${PKGS[@]} " != *" ${target} "* ]]; then
    log_error "Invalid target '$target' to ${DOTS_COMMAND}. List targets by 'dots list'"
    exit 1
  fi
done

export DOTS_COMMAND
# convert array into string since array is not exportable
export DOTS_TARGET="${DOTS_TARGETS[*]}"
export DOTS_MODE
export DOTS_VERSION
export DOTS_YES
export DOTS_SKIP_DEPENDENCIES

export VERBOSE
export CONFIG
export GH_ACCESS
export PREFIX


make_wrapper "${DOTS_TARGETS[@]}"
