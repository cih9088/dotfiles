#!/usr/bin/env bash

# copied from https://github.com/DanielFGray/fzf-scripts/blob/master/sshget
# modified by Andy <cih9088@gmail.com>

trap cleanup SIGHUP SIGINT SIGTERM

Color_Off='[0m'       # Text Reset
BRed='[1;31m'         # Red
BGreen='[1;32m'       # Green
Yellow='[0;33m'       # Yellow
BIYellow='[1;93m'     # Yellow

# https://stackoverflow.com/a/4025065
vercomp () { # version checker
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

# bash version check
bash_version=$(printf "%d.%d.%d" ${BASH_VERSINFO[@]:0:3})
vercomp "${bash_version}" "4"
[[ $? == 2 ]] && echo "This script requires bash version >= 4. Current bash version: ${bash_version}" >&2 && exit 1


declare -r esc=$'\033'
declare -r c_reset="${esc}[0m"
declare -r c_red="${esc}[31m"

declare -r fifo='/tmp/sshget.fifo'
declare -A domains=()
declare -A paths=()
declare -a files=()

ssh_port=22

err() {
  printf "${c_red}%s${c_reset}\n" "$*" >&2
}

die() {
  exit 1
}

usage() {
  LESS=-FEXR less <<HELP

${BRed}SYNOPSIS${Color_Off}
    ${BRed}$(basename "$0")${Color_Off} [${BRed}-p${Color_Off} ${BGreen}port_number${Color_Off}] ${BGreen}user@host1:/path/to/search${Color_Off}


${BRed}DESCRIPTION${Color_Off}
    scp combining with fzf


${BRed}OPTIONS${Color_Off}
    ${BRed}-p${Color_Off} ${BGreen}port_number${Color_Off}
        specify port number for ssh. 
        If not specified, use predefined or 22.

HELP
}

has() {
  local verbose=0
  if [[ $1 = '-v' ]]; then
    verbose=1
    shift
  fi
  for c; do c="${c%% *}"
    if ! command -v "$c" &> /dev/null; then
      (( verbose > 0 )) && err "$c not found"
      return 1
    fi
  done
}

has -v fzf rsync || die

cleanup() {
  [[ -e "$fifo" ]] && rm "$fifo"
}

# argument parsing
POSITIONAL=()
while [[ $# -gt 0 ]]; do
    # make it also '=' separated arguments
    [[ $1 == --*=* ]] && set -- "${1%%=*}" "${1#*=}" "${@:2}"
    key="$1"

    case $key in
        -p)
            ssh_port="${2:?$1 needs argument(Usages: $1 argument)}"
            shift 2 ;;
        *)
            POSITIONAL+=("$1")
            shift ;;
    esac
done
if [ -n "${POSITIONAL:-}" ]; then
    set -- "${POSITIONAL[@]}"
fi
! [[ $ssh_port =~ ^[0-9]+$ && $ssh_port -ge 0 && $ssh_port -le 65535 ]] \
    && err "$ssh_port is not a valid port" && exit 1
[[ ${ssh_port} -eq 22 ]] && ssh_cmd="ssh" || ssh_cmd="ssh -p ${ssh_port}"

mkfifo "$fifo"

if (( $# < 1 )); then
    usage
    cleanup
    die
fi

for a; do
    host="${a%:*}"
    path="${a##*:}"
    domains+=( ["$a"]="$host" )
    paths+=( ["$a"]="$path" )
    shift
done

for s in "${!domains[@]}"; do
    ${ssh_cmd} "${domains[$s]}" "find ${paths[$s]}" | /usr/bin/sed "s|^|${domains[$s]}:|" >> "$fifo" &
done

mapfile -t files < <(fzf -e --inline-info +s --multi --bind='Ctrl-A:toggle-all,`:jump' < "$fifo")

if (( ${#files[@]} )); then
    # https://unix.stackexchange.com/a/222215
    for idx in ${!files[@]}; do
        files[idx]="$(echo "${files[idx]// /\\ }" | sed -e "s/:/:\"/" -e "s/$/\"/")"
        # rsync per file becase of compatability with old version
        # https://stackoverflow.com/a/15818000
        rsync -auvzP -e "${ssh_cmd}" "${files[idx]}" .
    done
    # echo rsync -auvzP --dry-run -e "${ssh_cmd}" "${files[@]}" .
    # echo rsync -auvzP -e "${ssh_cmd}" \'"$(echo "${files[@]// /\\ }" | sed -e "s/:/:\"/" -e "s/$/\"/")"\' .
fi

cleanup
