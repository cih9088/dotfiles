#!/usr/bin/env bash

set -euo pipefail
trap "echo 'error: Script failed: see failed command above'" ERR
IFS=$'\n\t'

# Reset
Reset='[0m'       # Text Reset
Bold='[1m'       # Text Reset
Dark='[2m'       # Text Reset

# Regular Colors
Red='[0;31m'          # Red
Green='[0;32m'        # Green
Yellow='[0;33m'       # Yellow
Blue='[0;34m'         # Blue
Purple='[0;35m'       # Purple
Cyan='[0;36m'         # Cyan

# Bold
BRed='[1;31m'         # Red
BGreen='[1;32m'       # Green
BYellow='[1;33m'      # Yellow
BBlue='[1;34m'        # Blue
BPurple='[1;35m'      # Purple
BCyan='[1;36m'        # Cyan

# High Intensity
IRed='[0;91m'         # Red
IGreen='[0;92m'       # Green
IYellow='[0;93m'      # Yellow
IBlue='[0;94m'        # Blue
IPurple='[0;95m'      # Purple
ICyan='[0;96m'        # Cyan

vercomp () {
  if [[ $1 == $2 ]]; then
    echo 0
  fi
  local IFS=.
  local i ver1=($1) ver2=($2)
  # fill empty fields in ver1 with zeros
  for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
    ver1[i]=0
  done
  for ((i=0; i<${#ver1[@]}; i++)); do
    if [[ -z ${ver2[i]+x} ]]; then
      # fill empty fields in ver2 with zeros
      ver2[i]=0
    fi
    if (( 10#${ver1[i]} > 10#${ver2[i]} )); then
      echo 1
    fi
    if (( 10#${ver1[i]} < 10#${ver2[i]} )); then
      echo 2
    fi
  done
  echo 0
}

usage() {
  LESS=-FEXR less <<HELP

${BRed}SYNOPSIS${Reset}
    ${BRed}$(basename "$0")${Reset} [${BRed}--no-header${Reset}] \
[${BRed}-i${Reset} ${BGreen}interval${Reset}] [${BRed}-u${Reset}] [${BRed}-p${Reset}] \
[${BRed}-w${Reset}] [${BRed}-c${Reset}] [${BRed}-f${Reset}] [${BRed}-h${Reset}]


${BRed}DESCRIPTION${Reset}
    ${BRed}gpustat${Reset} is a pretty nvidia-smi \
base on https://github.com/wookayin/gpustat.


${BRed}OPTIONS${Reset}
    ${BRed}--no-header${Reset}
        Do not show header

    ${BRed}-i, --interval${Reset} ${BGreen}interval${Reset}
        Watch mode. If ${BGreen}interval${Reset} is not given, defualt to 1 second.

    ${BRed}-u, --show-user${Reset}
        Display USER of the process (default).
        If ${BRed}-p${Reset} or ${BRed}-c${Reset} is set, it would not set as default.

    ${BRed}-p, --show-pid${Reset}
        Display PID of the process.

    ${BRed}-w, --show-power${Reset}
        Display GPU power usage.

    ${BRed}-c, --show-cmd${Reset}
        Display command of the process.

    ${BRed}-f, --show-fan${Reset}
        Display GPU fan speed.

    ${BRed}-h, --help${Reset}
        show this help message.

HELP
}

error(){
  echo "$(basename "$0"): invalid option -- '$1'";
  echo "Try '$(basename "$0") -h' for more information.";
  exit 1;
}

ARGS=""
SHOW_HEADER=1
SHOW_PID=0
SHOW_POWER=0
SHOW_CMD=0
SHOW_FAN=0
SHOW_USER=2
INTERVAL=0
for pass in 1 2; do
  while [ ! -z ${1+x} ] && [ -n "$1" ]; do
    case $1 in
      '--') shift; break;;
      -*) case $1 in
        --no-header)        SHOW_HEADER=0;;
        -p|--show-pid)      SHOW_PID=1; [ ${SHOW_USER} == 1 ] || SHOW_USER=0;;
        -w|--show-power)    SHOW_POWER=1; ;;
        -c|--show-cmd)      SHOW_CMD=1; [ ${SHOW_USER} == 1 ] || SHOW_USER=0;;
        -u|--show-user)     SHOW_USER=1;;
        -f|--show-fan)      SHOW_FAN=1;;
        -i|--interval)      INTERVAL=${2:-1}; [ ! -z ${2:-} ] && shift;;
        -h|--help)          usage; exit 0;;
        --*)                error $1;;
        -*)                 [ $pass -eq 1 ] && ARGS="$ARGS $1" || error $1;;
        esac;;
      *)  [ $pass -eq 1 ] && ARGS="$ARGS $1" || error $1;;
    esac
    shift
  done
  if [ $pass -eq 1 ]; then
    ARGS=$(echo $ARGS | xargs)
    ARGS=$(getopt pwcufi: $ARGS)
    if [ $? != 0 ]; then
      usage; exit 2;
    fi
    set -- $(echo $ARGS | tr -s " " "\012")
  fi
done

# Handle positional arguments
if [ -n "$*" ]; then
  error "$*"
fi

case "$OSTYPE" in
  solaris*) platform="SOLARIS" ;;
  darwin*)  platform="OSX" ;;
  linux*)   platform="LINUX" ;;
  bsd*)     platform="BSD" ;;
  msys*)    platform="WINDOWS" ;;
  *)        platform="unknown: $OSTYPE" ;;
esac

if [[ $platform != LINUX ]]; then
  echo "This script dose not support $platform." >&2
  exit 1
fi

command -v nvidia-smi >/dev/null || ( echo "nvidia-smi command not found" >&2; exit 1 )
command -v awk >/dev/null || ( echo "awk command not found" >&2; exit 1 )
command -v paste >/dev/null || ( echo "paste command not found" >&2; exit 1 )
command -v hostname >/dev/null || ( echo "paste command not found" >&2; exit 1 )
command -v date >/dev/null || ( echo "paste command not found" >&2; exit 1 )
command -v strings >/dev/null || ( echo "strings command not found" >&2; exit 1 )

bash_version=$(printf ${BASH_VERSINFO[@]:0:3} | tr '[:space:]' '.')
result=$(vercomp "${bash_version}" "4" )
[[ ${result} == 2 ]] && (echo "This script requires bash version >= 4. Current bash version: ${bash_version}" >&2 && exit 1)

declare -A gpus

names=($(nvidia-smi --query-gpu=name --format=csv,noheader,nounits))
nvml_version=$(nvidia-smi -i 0 --query-gpu=driver_version --format=csv,noheader)
max_length=0
for name in ${names[@]}; do
  if [ ${#name} -gt ${max_length} ]; then
    max_length=${#name}
  fi
done
max_length=$(( ${max_length} + 2 ))

while true; do

  gpus_order=()

  # coproc basicfd { nvidia-smi --query-gpu=gpu_uuid,name,temperature.gpu,utilization.gpu,power.draw,power.limit,memory.used,memory.total --format=csv,noheader,nounits; }
  # exec 3>&${basicfd[0]}
  # coproc perfd { nvidia-smi --query-compute-apps=gpu_uuid,pid,used_memory --format=csv,noheader,nounits; }
  # exec 4>&${perfd[0]}
  # basic_info=$(cat <&3)
  # per_info=$(cat <&4)
  basic_info=$(nvidia-smi --query-gpu=gpu_uuid,name,temperature.gpu,utilization.gpu,fan.speed,power.draw,power.limit,memory.used,memory.total, --format=csv,noheader,nounits)
  per_info=$(nvidia-smi --query-compute-apps=gpu_uuid,pid,used_memory --format=csv,noheader,nounits)

  ctr=0
  while IFS= read -r line; do
    line_=$(awk -F, 'BEGIN {OFS = ","} {print substr($0, index($0,$2))}' <(echo ${line}))
    line_="${ctr},${line_}"
    gpus["$(awk -F, '{print $1}' <(echo ${line}))"]="${line_}"
    gpus_order+=("$(awk -F, '{print $1}' <(echo ${line}))")
    ctr=$(( ${ctr} + 1 ))
  done <<< "${basic_info}"

  re_parse=false
  if [ ! -z "${per_info}" ]; then
    while IFS= read -r line; do
      uuid=$(cut -d ',' -f 1 <(echo ${line}) | tr -d '[:space:]')
      pid=$(cut -d ',' -f 2 <(echo ${line}) | tr -d '[:space:]')
      memory=$(cut -d ',' -f 3 <(echo ${line}) | tr -d '[:space:]')
      user=$(stat -c "%U" /proc/${pid} 2>/dev/null || echo "Anonymous")
      comm=$(strings /proc/${pid}/cmdline || echo "Unkonwn")
      comm=$(basename "/Unkonwn$(echo $comm | awk '{print $1}')")
      if [ $user == "Anonymous" ] || [ $comm == "Unkonwn" ]; then
        re_parse=true
        break
      fi
      gpus[${uuid}]="${gpus[${uuid}]}, ${user}, ${comm}, ${pid}, ${memory}"
    done <<< "${per_info}"
  fi

  if [ ${re_parse} == "true" ]; then
    continue
  fi

  out=""
  if [ ${SHOW_HEADER} -eq 1 ]; then
    out+="${Bold}$(hostname)${Reset} ${Dark}${nvml_version}${Reset}   $(date)\n"
  fi

  for uuid in "${gpus_order[@]}"; do
    out+=$(awk -F ', ' -v SHOW_PID="${SHOW_PID}" -v SHOW_POWER="${SHOW_POWER}" -v SHOW_CMD="${SHOW_CMD}" -v SHOW_USER="${SHOW_USER}" -v SHOW_FAN=${SHOW_FAN} '
  function bold() {
    printf "\033[1m";
  }

  function darker() {
    printf "\033[2m";
  }

  function red() {
    printf "\033[31m";
  }

  function redI() {
    printf "\033[91m";
  }

  function yellow() {
    printf "\033[33m";
  }

  function yellowI() {
    printf "\033[93m";
  }

  function green() {
    printf "\033[32m";
  }

  function greenI() {
    printf "\033[92m";
  }

  function cyan() {
    printf "\033[36m"
  }

  function cyanI() {
    printf "\033[96m"
  }

  function purple() {
    printf "\033[35m"
  }

  function purpleI() {
    printf "\033[95m"
  }

  function blue() {
    printf "\033[34m"
  }

  function blueI() {
    printf "\033[94m"
  }

  function reset() {
    printf "\033[0;39m";
  }

  {
    # index
    cyan()
    printf "[%s] ", $1
    reset()

    # gpu name
    blue()
    printf "%-'${max_length}'s", $2
    reset()

    printf " | "

    # temperature
    if ( $3 >= 60 ) {
      bold()
    }
    red()
    printf "%dC", $3
    reset()

    # fan
    if ( SHOW_FAN == 1) {
      printf ", "

      if ( $5 >= 70) {
        bold()
      }
      cyanI()
      printf "%3d %", $5
      reset()

    }

    printf ", "

    # utilisation
    if ( $4 >= 70) {
      bold()
    }
    green()
    printf "%3d %", $4
    reset()

    # power
    if ( SHOW_POWER == 1 ) {
      printf ", "

      if ( $6 / $7 >= 0.7 ) {
        bold()
      }
      purple()
      printf "%3d", $6
      reset()

      printf " / "

      purple()
      printf "%3d W", $7
      reset()
    }

    printf " | "

    bold()
    yellow()
    printf "%5d", $8
    reset()

    printf " / "

    yellow()
    printf "%5d", $9
    reset()

    printf " MB |"

    for (i=10; i < NF; ) {
      printf " "
      if ( SHOW_USER > 0 ) {
        darker()
        printf "%s", $i
        reset()
      }

      i = i + 1
      if ( SHOW_CMD == 1 ) {
        if ( SHOW_USER > 0 ) {
          printf ":"
        }

        cyanI()
        printf "%s", $i
        reset()
      }

      i = i + 1
      if ( SHOW_PID == 1 ) {
        if ( SHOW_USER > 0 || SHOW_CMD == 1 ) {
          printf "/"
        }

        reset()
        printf "%s", $i
        reset()
      }

      printf "("
      i = i + 1

      yellow()
      printf "%dM", $i
      reset()

      printf ")"
      i = i + 1
    }

    printf "\n"

  }' <(echo "${gpus[${uuid}]}"))
    out+="\n"
  done

  if [ ${INTERVAL} -gt 0 ]; then
    tput clear
  fi
  echo -e ${out::-2}

  if [ ${INTERVAL} -gt 0 ]; then
    sleep ${INTERVAL}
  else
    break
  fi
done
