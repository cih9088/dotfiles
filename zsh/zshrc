
# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

#   --------------------------------------------------------------------------------------
#
#  Description:  This file holds all my BASH / ZSH configurations and aliases
#
#  Sections:
#  1.   Environment Configuration
#  2.   Make Terminal Better (remapping defaults and adding functionality)
#  3.   File and Folder Management
#  4.   Searching
#  5.   Process Management
#  6.   Networking
#  7.   System Operations & Information
#  8.   Web Development
#  9.   Reminders & Notes
#
#   --------------------------------------------------------------------------------------




#   ======================================================================================
#   1.  ENVIRONMENT CONFIGURATION
#   ======================================================================================

#   Identify platform
#   --------------------------------------------------------------------------------------
    case "$OSTYPE" in
        solaris*) platform="SOLARIS" ;;
        darwin*)  platform="OSX" ;;
        linux*)   platform="LINUX" ;;
        bsd*)     platform="BSD" ;;
        msys*)    platform="WINDOWS" ;;
        *)        platform="unknown: $OSTYPE" ;;
    esac

#   Set PATH
#   --------------------------------------------------------------------------------------
    # add user's private bin directories to PATH
    [[ ":$PATH:" != *":$HOME/.local/bin:"* ]] && export PATH="$HOME/.local/bin:${PATH}"
    # add yarn to PATH
    [[ ":$PATH:" != *":$HOME/.yarn/bin:"* ]] && export PATH="$HOME/.yarn/bin:${PATH}"
    [[ ":$PATH:" != *":$HOME/.config/yarn/global/node_modules/.bin:"* ]] && export PATH="$HOME/.config/yarn/global/node_modules/.bin:${PATH}"

#   Set default blocksize for ls, df, du
#   from this: http://hints.macworld.com/comment.php?mode=view&cid=24491
#   --------------------------------------------------------------------------------------
    export BLOCKSIZE=1k

#   Editors
#   --------------------------------------------------------------------------------------
    export EDITOR=`which nvim`
    export VISUAL=`which nvim`
    export PAGER='less'

#   virtualenvwrapper
#   --------------------------------------------------------------------------------------
    export WORKON_HOME=$HOME/.virtualenvs
    export PROJECT_HOME=$HOME/working
    export VIRTUALENVWRAPPER_PYTHON=$(which python3)
    export VIRTUALENVWRAPPER_VIRTUALENV=$(which virtualenv)
    # export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--system-site-packages'
    export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'

#   Add color to terminal
#   (this is all commented out as I use Mac Terminal Profiles)
#   from http://osxdaily.com/2012/02/21/add-color-to-the-terminal-in-mac-os-x/
#   --------------------------------------------------------------------------------------
#   export CLICOLORS=1
#   export LSCOLORS=exfxcxdxbxGxDxabagacad
   export LS_COLORS="no=00:fi=00:di=36:ln=35:pi=30;44:so=35;44:do=35;44:bd=33;44:cd=37;44:or=05;37;41:mi=05;37;41:ex=01;31:*.cmd=01;31:*.exe=01;31:*.com=01;31:*.bat=01;31:*.reg=01;31:*.app=01;31:*.txt=32:*.org=32:*.md=32:*.mkd=32:*.h=32:*.c=32:*.C=32:*.cc=32:*.cpp=32:*.cxx=32:*.objc=32:*.cl=32:*.sh=32:*.bash=32:*.csh=32:*.zsh=32:*.el=32:*.vim=32:*.java=32:*.pl=32:*.pm=32:*.py=32:*.rb=32:*.hs=32:*.php=32:*.htm=32:*.html=32:*.shtml=32:*.erb=32:*.haml=32:*.xml=32:*.rdf=32:*.css=32:*.sass=32:*.scss=32:*.less=32:*.js=32:*.coffee=32:*.man=32:*.0=32:*.1=32:*.2=32:*.3=32:*.4=32:*.5=32:*.6=32:*.7=32:*.8=32:*.9=32:*.l=32:*.n=32:*.p=32:*.pod=32:*.tex=32:*.go=32:*.sql=32:*.bmp=33:*.cgm=33:*.dl=33:*.dvi=33:*.emf=33:*.eps=33:*.gif=33:*.jpeg=33:*.jpg=33:*.JPG=33:*.mng=33:*.pbm=33:*.pcx=33:*.pdf=33:*.pgm=33:*.png=33:*.PNG=33:*.ppm=33:*.pps=33:*.ppsx=33:*.ps=33:*.svg=33:*.svgz=33:*.tga=33:*.tif=33:*.tiff=33:*.xbm=33:*.xcf=33:*.xpm=33:*.xwd=33:*.xwd=33:*.yuv=33:*.aac=33:*.au=33:*.flac=33:*.m4a=33:*.mid=33:*.midi=33:*.mka=33:*.mp3=33:*.mpa=33:*.mpeg=33:*.mpg=33:*.ogg=33:*.ra=33:*.wav=33:*.anx=33:*.asf=33:*.avi=33:*.axv=33:*.flc=33:*.fli=33:*.flv=33:*.gl=33:*.m2v=33:*.m4v=33:*.mkv=33:*.mov=33:*.MOV=33:*.mp4=33:*.mp4v=33:*.mpeg=33:*.mpg=33:*.nuv=33:*.ogm=33:*.ogv=33:*.ogx=33:*.qt=33:*.rm=33:*.rmvb=33:*.swf=33:*.vob=33:*.webm=33:*.wmv=33:*.doc=31:*.docx=31:*.rtf=31:*.odt=31:*.dot=31:*.dotx=31:*.ott=31:*.xls=31:*.xlsx=31:*.ods=31:*.ots=31:*.ppt=31:*.pptx=31:*.odp=31:*.otp=31:*.fla=31:*.psd=31:*.7z=1;35:*.apk=1;35:*.arj=1;35:*.bin=1;35:*.bz=1;35:*.bz2=1;35:*.cab=1;35:*.deb=1;35:*.dmg=1;35:*.gem=1;35:*.gz=1;35:*.iso=1;35:*.jar=1;35:*.msi=1;35:*.rar=1;35:*.rpm=1;35:*.tar=1;35:*.tbz=1;35:*.tbz2=1;35:*.tgz=1;35:*.tx=1;35:*.war=1;35:*.xpi=1;35:*.xz=1;35:*.z=1;35:*.Z=1;35:*.zip=1;35:*.ANSI-30-black=30:*.ANSI-01;30-brblack=01;30:*.ANSI-31-red=31:*.ANSI-01;31-brred=01;31:*.ANSI-32-green=32:*.ANSI-01;32-brgreen=01;32:*.ANSI-33-yellow=33:*.ANSI-01;33-bryellow=01;33:*.ANSI-34-blue=34:*.ANSI-01;34-brblue=01;34:*.ANSI-35-magenta=35:*.ANSI-01;35-brmagenta=01;35:*.ANSI-36-cyan=36:*.ANSI-01;36-brcyan=01;36:*.ANSI-37-white=37:*.ANSI-01;37-brwhite=01;37:*.log=01;34:*~=01;34:*#=01;34:*.bak=01;36:*.BAK=01;36:*.old=01;36:*.OLD=01;36:*.org_archive=01;36:*.off=01;36:*.OFF=01;36:*.dist=01;36:*.DIST=01;36:*.orig=01;36:*.ORIG=01;36:*.swp=01;36:*.swo=01;36:*,v=01;36:*.gpg=34:*.gpg=34:*.pgp=34:*.asc=34:*.3des=34:*.aes=34:*.enc=34:*.sqlite=34:"

#   CUDA enviroment variables
#   --------------------------------------------------------------------------------------
    if [[ ${platform} == "LINUX" ]]; then
        export CUDA_DEVICE_ORDER=PCI_BUS_ID
        export CUDA_HOME=/usr/local/cuda
        [[ ":$PATH:" != *":$CUDA_HOME/bin:"* ]] && export PATH="${PATH}:$CUDA_HOME/bin"
        [[ ":$LD_LIBRARY_PATH:" != *":$CUDA_HOME/lib64:$CUDA_HOME/extras/CUPTI/lib64:"* ]] && \
            export LD_LIBRARY_PATH="$CUDA_HOME/lib64:$CUDA_HOME/extras/CUPTI/lib64:${LD_LIBRARY_PATH}"  # For CUDA Toolkit >= 9.0
        # export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH                                      # For CUDA Toolkit <= 7.5
    fi

#   Set thefuck
#   --------------------------------------------------------------------------------------
    if [ -x "$(command -v thefuck)" ]; then
        eval $(thefuck --alias)
    fi

#   Set FZF
#   --------------------------------------------------------------------------------------
    if [ -x "$(command -v fd)" ]; then
        export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
        export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    fi
    export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -200'"
    export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200'"
    # export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview'"
    export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:5:wrap"
    [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh




#   ======================================================================================
#   2.  MAKE TERMINAL BETTER
#   ======================================================================================

#   aliases
#   --------------------------------------------------------------------------------------
    # GPU access
    if [[ ${platform} == "LINUX" ]]; then
        alias gpu0='CUDA_VISIBLE_DEVICES=0 python '
        alias gpu1='CUDA_VISIBLE_DEVICES=1 python '
        alias gpu2='CUDA_VISIBLE_DEVICES=2 python '
        alias gpu3='CUDA_VISIBLE_DEVICES=3 python '
        alias gpu4='CUDA_VISIBLE_DEVICES=4 python '
        alias gpu5='CUDA_VISIBLE_DEVICES=5 python '
        alias gpu6='CUDA_VISIBLE_DEVICES=6 python '
        alias gpu7='CUDA_VISIBLE_DEVICES=7 python '
    fi

    # rsync with progressbar
    alias rsync-copy-sum='rsync-copy --info=progress2,name0 '
    alias rsync-move-sum='rsync-move --info=progress2,name0 '

    # glg: display the graphic log
    alias glg="git log --graph --abbrev-commit --decorate \
    --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)' --all"

    if [[ ${platform} == "OSX" ]]; then
        alias f='open -a Finder ./'                     # f:            Opens current directory in MacOS Finder
        alias DT='tee ~/Desktop/terminalOut.txt'        # DT:           Pipe content to file on MacOS Desktop
    fi
    alias ~="cd ~"                                      # ~:            Go Home
    alias c='clear'                                     # c:            Clear terminal display
    alias path='echo -e ${PATH//:/\\n}'                 # path:         Echo all executable Paths
    function mcd () { mkdir -p "$1" && cd "$1"; }       # mcd:          Makes new Dir and jumps inside
    function trash () { command mv "$@" ~/.Trash ; }    # trash:        Moves a file to the MacOS trash
    function ql () { qlmanage -p "$*" >& /dev/null; }   # ql:           Opens any file in MacOS Quicklook Preview

    ########## commented in favour of zprezto ##########
    # alias cp='cp -iv'                           # Preferred 'cp' implementation
    # alias mv='mv -iv'                           # Preferred 'mv' implementation
    # alias mkdir='mkdir -pv'                     # Preferred 'mkdir' implementation
    # alias ls='ls --group-directories-first --color=auto'
    # alias ll='ls -FGlhp'                        # Preferred 'ls' implementation
    # alias la='ll -A'                            #
    # alias lr='ll -R'
    # alias lx='ll -XB'
    # alias lk='ll -Sr'
    # alias rm='nocorrect rm -iv'
    # alias less='less -FSRXc'                    # Preferred 'less' implementation
    # alias which='type -all'                     # which:        Find executables
    # alias show_options='shopt'                  # Show_options: display bash options settings
    # alias fix_stty='stty sane'                  # fix_stty:     Restore terminal settings when screwed up
    # alias cic='set completion-ignore-case On'   # cic:          Make tab-completion case-insensitive

    # Full Recursive Directory Listing
    # alias lr='ls -R | grep ":$" | sed -e '\''s/:$//'\'' -e '\''s/[^-][^\/]*\//--/g'\'' -e '\''s/^/   /'\'' -e '\''s/-/|/'\'' | less'

    # Search manpage given in agument '1' for term given in argument '2' (case insensitive)
    # displays paginated result with colored search terms and two lines surrounding each hit.
    # Example: mans mplayer codec
    # mans () { man $1 | grep -iC2 --color=always $2 | less }

    # to remind yourself of an alias (given some part of it)
    showa () { /usr/bin/grep --color=always -i -a1 $@ ~/Library/init/bash/aliases.bash | grep -v '^\s*$' | less -FSRXc ; }

#   update environment in tmux just before every command
#   --------------------------------------------------------------------------------------
    if [ -n "$TMUX" ]; then
        function refresh {
            eval $(tmux showenv -s DISPLAY)
            eval $(tmux showenv -s SSH_AUTH_SOCK)
        }
    else
        function refresh { }
    fi
    function preexec() {
        refresh
    }

#   vi mode for zsh
#   --------------------------------------------------------------------------------------
    if [ -n "$ZSH_VERSION" ]; then
        bindkey -v
        export KEYTIMEOUT=1
    fi

#    bring $EDITOR to amend your command through <C-x><C-e>
#   --------------------------------------------------------------------------------------
    if [ -n "$ZSH_VERSION" ]; then
        autoload -z edit-command-line
        zle -N edit-command-line
        bindkey "^X^E" edit-command-line
    fi

#   Custom functions
#   --------------------------------------------------------------------------------------
    unalias cd
    cd() { # list directory contents based on file counts upon 'cd'
        nocorrect builtin cd "$@" && (
        n_files=$(\ls -f | wc -l)
        term_size=$(( `tput lines` * `tput cols` / 100 ))
        if [ $n_files -lt $term_size ]; then
            ls
        fi
        )
    }

    unalias man
    man () { # fix man page width for better readability
        local width="${COLUMNS:-100}"
        (( width > 100 )) && width=100
        MANWIDTH="$width" nocorrect command man "$@"
    }

    z() { # fasd & fzf change directory - jump using `fasd` if given argument, filter output of `fasd` using `fzf` else
        [ $# -gt 0 ] && fasd_cd -d "$*" && return
        local dir
        dir="$(fasd -Rdl "$1" | fzf -1 -0 --no-sort +m)" && cd "${dir}" || return 1
    }

    tm() { # tm - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
        # `tm` will allow you to select your tmux session via fzf.
        # `tm irc` will attach to the irc session (if it exists), else it will create it.
        [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
        if [ $1 ]; then
            tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
        fi
        session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
    }

    ftpane() { # ftpane - switch pane (@george-b)
        local panes current_window current_pane target target_window target_pane
        panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
        current_pane=$(tmux display-message -p '#I:#P')
        current_window=$(tmux display-message -p '#I')

        target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return

        target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
        target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

        if [[ $current_window -eq $target_window ]]; then
            tmux select-pane -t ${target_window}.${target_pane}
        else
            tmux select-pane -t ${target_window}.${target_pane} &&
                tmux select-window -t $target_window
        fi
    }

    fkill() { # kill processes - list only the ones you can kill
        local pid 
        if [ "$UID" != "0" ]; then
            pid=$(ps -f -u $UID | sed 1d | fzf -m --cycle --preview 'echo {}' --preview-window down:5:wrap | awk '{print $2}')
        else
            pid=$(ps -ef | sed 1d | fzf -m --cycle --preview 'echo {}' --preview-window down:5:wrap | awk '{print $2}')
        fi

        if [ "x$pid" != "x" ]; then
            echo $pid | xargs kill -${1:-9}
        fi
    }



#   ======================================================================================
#   3.  FILE AND FOLDER MANAGEMENT
#   ======================================================================================

   # zipf () { zip -r "$1".zip "$1" ; }          # zipf:         To create a ZIP archive of a folder
   # alias numFiles='echo $(ls -1 | wc -l)'      # numFiles:     Count of non-hidden files in current dir
   # alias make1mb='mkfile 1m ./1MB.dat'         # make1mb:      Creates a file of 1mb size (all zeros)
   # alias make5mb='mkfile 5m ./5MB.dat'         # make5mb:      Creates a file of 5mb size (all zeros)
   # alias make10mb='mkfile 10m ./10MB.dat'      # make10mb:     Creates a file of 10mb size (all zeros)

#   'Cd's to frontmost window of MacOS Finder
#   --------------------------------------------------------------------------------------
#    cdf () {
#        currFolderPath=$( /usr/bin/osascript <<EOT
#            tell application "Finder"
#                try
#            set currFolder to (folder of the front window as alias)
#                on error
#            set currFolder to (path to desktop folder as alias)
#                end try
#                POSIX path of currFolder
#            end tell
#EOT
#        )
#        echo "cd to \"$currFolderPath\""
#        cd "$currFolderPath"
#    }

#   Extract most know archives with one command
#   --------------------------------------------------------------------------------------
   # extract () {
   #     if [ -f $1 ] ; then
   #       case $1 in
   #         *.tar.bz2)   tar xjf $1     ;;
   #         *.tar.gz)    tar xzf $1     ;;
   #         *.bz2)       bunzip2 $1     ;;
   #         *.rar)       unrar e $1     ;;
   #         *.gz)        gunzip $1      ;;
   #         *.tar)       tar xf $1      ;;
   #         *.tbz2)      tar xjf $1     ;;
   #         *.tgz)       tar xzf $1     ;;
   #         *.zip)       unzip $1       ;;
   #         *.Z)         uncompress $1  ;;
   #         *.7z)        7z x $1        ;;
   #         *)     echo "'$1' cannot be extracted via extract()" ;;
   #          esac
   #      else
   #          echo "'$1' is not a valid file"
   #      fi
   # }




#   ======================================================================================
#   4.  SEARCHING
#   ======================================================================================

   # alias qfind="find . -name "                 # qfind:    Quickly search for file
   # ff () { /usr/bin/find . -name "$@" ; }      # ff:       Find file under the current directory
   # ffs () { /usr/bin/find . -name "$@"'*' ; }  # ffs:      Find file whose name starts with a given string
   # ffe () { /usr/bin/find . -name '*'"$@" ; }  # ffe:      Find file whose name ends with a given string

#   Search for a file using MacOS Spotlight's metadata
#   --------------------------------------------------------------------------------------
   # spotlight () { mdfind "kMDItemDisplayName == '$@'wc"; }




#   ======================================================================================
#   5.  PROCESS MANAGEMENT
#   ======================================================================================

#   find out the pid of a specified process
#   --------------------------------------------------------------------------------------
#       Note that the command name can be specified via a regex
#       E.g. findPid '/d$/' finds pids of all processes with names ending in 'd'
#       Without the 'sudo' it will only find processes of the current user
#   --------------------------------------------------------------------------------------
    findPid () { lsof -t -c "$@" ; }

#   memHogsTop, memHogsPs:  Find memory hogs
#   --------------------------------------------------------------------------------------
    alias memHogsTop='top -l 2 -o rsize | head -20'
    alias memHogsPs='ps wwaxm -o pid,stat,vsize,rss,time,command | head -10'

#   cpuHogs:  Find CPU hogs
#   --------------------------------------------------------------------------------------
    alias cpu_hogs='ps wwaxr -o pid,stat,%cpu,time,command | head -10'

#   Continual 'top' listing (every 10 seconds)
#   --------------------------------------------------------------------------------------
    # alias topForever='top -l 9999999 -s 10 -o cpu'

#   ttop:  Recommended 'top' invocation to minimize resources
#   --------------------------------------------------------------------------------------
#       Taken from this macosxhints article
#       http://www.macosxhints.com/article.php?story=20060816123853639
#   --------------------------------------------------------------------------------------
    # alias ttop="top -R -F -s 10 -o rsize"

#   my_ps: List processes owned by my user:
#   --------------------------------------------------------------------------------------
    my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command ; }





#   ======================================================================================
#   6.  NETWORKING
#   ======================================================================================

    alias myip='curl ip.appspot.com'                    # myip:         Public facing IP Address
    alias netCons='lsof -i'                             # netCons:      Show all open TCP/IP sockets
    alias flushDNS='dscacheutil -flushcache'            # flushDNS:     Flush out the DNS Cache
    alias lsock='sudo lsof -i -P'                       # lsock:        Display open sockets
    alias lsockU='sudo lsof -nP | grep UDP'             # lsockU:       Display only open UDP sockets
    alias lsockT='sudo lsof -nP | grep TCP'             # lsockT:       Display only open TCP sockets
    alias ipInfo0='ipconfig getpacket en0'              # ipInfo0:      Get info on connections for en0
    alias ipInfo1='ipconfig getpacket en1'              # ipInfo1:      Get info on connections for en1
    alias openPorts='sudo lsof -i | grep LISTEN'        # openPorts:    All listening connections
    alias showBlocked='sudo ipfw list'                  # showBlocked:  All ipfw rules inc/ blocked IPs

#   display useful host related informaton
#   --------------------------------------------------------------------------------------
    ii() {
        echo -e "\nYou are logged on ${RED}$HOST"
        echo -e "\nAdditionnal information:$NC " ; uname -a
        echo -e "\n${RED}Users logged on:$NC " ; w -h
        echo -e "\n${RED}Current date :$NC " ; date
        echo -e "\n${RED}Machine stats :$NC " ; uptime
        echo -e "\n${RED}Current network location :$NC " ; scselect
        echo -e "\n${RED}Public facing IP Address :$NC " ;myip
        #echo -e "\n${RED}DNS Configuration:$NC " ; scutil --dns
        echo
    }


#   ======================================================================================
#   7.  SYSTEMS OPERATIONS & INFORMATION
#   ======================================================================================

    alias mountReadWrite='/sbin/mount -uw /'    # mountReadWrite:   For use when booted into single-user

#   cleanupDS:  Recursively delete .DS_Store files
#   --------------------------------------------------------------------------------------
    alias cleanupDS="find . -type f -name '*.DS_Store' -ls -delete"

#   finderShowHidden:   Show hidden files in Finder
#   finderHideHidden:   Hide hidden files in Finder
#   --------------------------------------------------------------------------------------
    alias finderShowHidden='defaults write com.apple.finder ShowAllFiles TRUE'
    alias finderHideHidden='defaults write com.apple.finder ShowAllFiles FALSE'

#   cleanupLS:  Clean up LaunchServices to remove duplicates in the "Open With" menu
#   --------------------------------------------------------------------------------------
    alias cleanupLS="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder"

#    screensaverDesktop: Run a screensaver on the Desktop
#   --------------------------------------------------------------------------------------
    alias screensaverDesktop='/System/Library/Frameworks/ScreenSaver.framework/Resources/ScreenSaverEngine.app/Contents/MacOS/ScreenSaverEngine -background'





#   ======================================================================================
#   8.  WEB DEVELOPMENT
#   ======================================================================================

    alias apacheEdit='sudo edit /etc/httpd/httpd.conf'      # apacheEdit:       Edit httpd.conf
    alias apacheRestart='sudo apachectl graceful'           # apacheRestart:    Restart Apache
    alias editHosts='sudo edit /etc/hosts'                  # editHosts:        Edit /etc/hosts file
    alias herr='tail /var/log/httpd/error_log'              # herr:             Tails HTTP error logs
    alias apacheLogs="less +F /var/log/apache2/error_log"   # Apachelogs:   Shows apache error logs
    httpHeaders () { /usr/bin/curl -I -L $@ ; }             # httpHeaders:      Grabs headers from web page

#   httpDebug:  Download a web page and show info on what took time
#   --------------------------------------------------------------------------------------
    httpDebug () { /usr/bin/curl $@ -o /dev/null -w "dns: %{time_namelookup} connect: %{time_connect} pretransfer: %{time_pretransfer} starttransfer: %{time_starttransfer} total: %{time_total}\n" ; }




#   ======================================================================================
#   9.  REMINDERS & NOTES
#   ======================================================================================

#   remove_disk: spin down unneeded disk
#   --------------------------------------------------------------------------------------
#   diskutil eject /dev/disk1s3

#   to change the password on an encrypted disk image:
#   --------------------------------------------------------------------------------------
#   hdiutil chpass /path/to/the/diskimage

#   to mount a read-only disk image as read-write:
#   --------------------------------------------------------------------------------------
#   hdiutil attach example.dmg -shadow /tmp/example.shadow -noverify

#   mounting a removable drive (of type msdos or hfs)
#   --------------------------------------------------------------------------------------
#   mkdir /Volumes/Foo
#   ls /dev/disk*   to find out the device to use in the mount command)
#   mount -t msdos /dev/disk1s1 /Volumes/Foo
#   mount -t hfs /dev/disk1s1 /Volumes/Foo

#   to create a file of a given size: /usr/sbin/mkfile or /usr/bin/hdiutil
#   --------------------------------------------------------------------------------------
#   e.g.: mkfile 10m 10MB.dat
#   e.g.: hdiutil create -size 10m 10MB.dmg
#   the above create files that are almost all zeros - if random bytes are desired
#   then use: ~/Dev/Perl/randBytes 1048576 > 10MB.dat
