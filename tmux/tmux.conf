# cat << EOF > /dev/null
#
# Reference:
# - https://github.com/gpakosz/.tmux
# - https://github.com/junegunn/dotfiles
# - https://github.com/samoshkin/tmux-config
#
# Options:
# - Session options (set-option [-g])
# - Window options (set-window-option [-g])

# -------------------------------------------------------------------
# General
# -------------------------------------------------------------------

# Change bind key to ctrl-a
unbind-key c-b
set-option -g prefix c-a

# start windows numbering at 1
set-option -g base-index 1
# make pane numbering consistent with windows
set-window-option -g pane-base-index 1
# Renumber windows when a window is closed
set-option -g renumber-windows on

# History
set-option -g history-limit 102400

# faster command sequences
set-option -s escape-time 10
# Repeat time limit (ms)
set-option -g repeat-time 500

# 256-color terminal
set-option -g default-terminal "screen-256color"

# Add truecolor support (tmux info | grep Tc)
set-option -ga terminal-overrides ",xterm-256color:Tc"

# set -as terminal-overrides ',xterm*:sitm=\E[3m'

# Key binding in the status line (bind-key :)
set-option -g status-keys emacs

# mouse mode
set-option -g mouse

# Prevent from window renaming
set-option -g allow-rename off

# toggle mouse
bind m run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"

# # Prompt to rename window right after it's created
# set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'


# -------------------------------------------------------------------
# Window options
# -------------------------------------------------------------------

# Copy-mode
set-window-option -g mode-keys vi

# -------------------------------------------------------------------
# Key bindings
# -------------------------------------------------------------------

# reload configuration
bind-key r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'

# prefix c
bind-key c new-window -c "#{pane_current_path}"

# window navigation
unbind-key n
unbind-key p
bind-key Tab last-window        # move to last active window
bind-key -r C-h previous-window # select previous window
bind-key -r C-l next-window     # select next window

# prefix a
bind-key a send-prefix

# Moving windows
bind-key -r > swap-window -t :+
bind-key -r < swap-window -t :-

# Back and forth
bind-key Space next-layout # Overridden

# pane navigation
bind -r h select-pane -L  # move left
bind -r j select-pane -D  # move down
bind -r k select-pane -U  # move up
bind -r l select-pane -R  # move right
# bind > swap-pane -D       # swap current pane with the next one
# bind < swap-pane -U       # swap current pane with the previous one
# bind-key tab select-pane -t :.+
# bind-key btab select-pane -t :.-

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\ select-pane -l

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# split current window vertically
bind-key v split-window -h -c "#{pane_current_path}"
# split current window horizontally
bind-key h split-window -c "#{pane_current_path}"
unbind '"'
unbind %

# Synchronize panes
bind-key e set-window-option synchronize-pane \; display-message "synchronize is now #{?pane_synchronized,on,off}"

# kill window
unbind &
bind X confirm-before -p "kill-window #W? (y/n)" kill-window

# -- copy mode -----------------------------------------------------------------
bind Enter copy-mode # enter copy mode

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
# run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
# run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
# run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
# run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
# run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
# run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

# # copy to Mac OSX clipboard
# if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# # copy to X11 clipboard
# if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
# if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# # copy to Windows clipboard
# if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
# if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'

if -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
           "run 'tmux set -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"

yank="~/.tmux/yank.sh"
# Copy selected text
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi Y send-keys -X copy-line \;\
    run "tmux save-buffer - | $yank"
bind-key -T copy-mode-vi D send-keys -X copy-end-of-line \;\
    run "tmux save-buffer - | $yank"
bind-key -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
    run "tmux save-buffer - | $yank"

# Clear scrollback buffer
bind-key C-l send-keys C-l \; clear-history \; display-message "pane history cleared"

# Goyo
bind-key G set status

set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"
bind '$' run "~/.tmux/renew_env.sh"


# -------------------------------------------------------------------
# Decoration (256-color)
# -------------------------------------------------------------------
set-option -g status-justify left
set-option -g status-left '#[bg=colour72] #[bg=colour237] #[bg=colour236] #[bg=colour235]#[fg=colour185] #(whoami)@#h #[bg=colour236] '
set-option -g status-left-length 30
set-option -g status-bg colour237
set-option -g status-right '#{prefix_highlight} #[bg=colour236] #[bg=colour235]#[fg=colour185] #(date "+%a %d %b %H:%M") #[bg=colour236] #[bg=colour237] #[bg=colour72] '
set-option -g status-interval 60  # redraw status line every 10 seconds

set-option -g pane-border-status bottom
set-option -g pane-border-format "#{pane_index} #{pane_current_command}"
set-option -g pane-active-border-fg colour253
set-option -g pane-border-fg colour243

set-window-option -g window-status-format '#[bg=colour238]#[fg=colour107] #I #[bg=colour239]#[fg=colour110] #[bg=colour240]#W#[bg=colour239]#[fg=colour195]#F#[bg=colour238] '
set-window-option -g window-status-current-format '#[bg=colour236]#[fg=colour215] #I #[bg=colour235]#[fg=colour167] #[bg=colour234]#W#[bg=colour235]#[fg=colour195]#F#[bg=colour236] '

# set-window-option -g window-style 'bg=colour238'
# set-window-option -g window-active-style 'bg=colour237'


# -------------------------------------------------------------------
# fzf integration
# -------------------------------------------------------------------

# select-pane (@george-b)
bind-key 0 run "tmux split-window -l 12 'zsh -ci ftpane'"

# -------------------------------------------------------------------
# etc.
# -------------------------------------------------------------------

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux.conf.remote'

# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237
bind -T root F12  \
     set prefix None \;\
     set key-table off \;\
     set-option status-left '#[bg=colour96] #[bg=colour237] #[bg=colour236] #[bg=colour235]#[fg=colour213] #(whoami)@#h #[bg=colour236] ' \;\
     set-option status-right '#[bg=colour236] #[bg=colour235]#[fg=colour213] #(date "+%a %d %b %H:%M") #[bg=colour236] #[bg=colour237] #[bg=colour96] ' \;\
     set -g status-position top \;\
     refresh-client -S \;\

 bind -T off F12 \
     set -u prefix \;\
     set -u key-table \;\
     set -u status-left \;\
     set -u status-right \;\
     set -g status-position bottom \;\
     refresh-client -S

# TPM
# @see https://github.com/tmux-plugins/tpm
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'cih9088/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
run '~/.tmux/plugins/tpm/tpm'

set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-processes 'ssh watch glances'

set -g @prefix_highlight_show_copy_mode 'on'

# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# _toggle_mouse() {
#   old=$(tmux show -gv mouse)
#   new=""
#
#   if [ "$old" = "on" ]; then
#     new="off"
#   else
#     new="on"
#   fi
#
#   tmux set -g mouse $new \;\
#        display "mouse mode is now $new"
# }
#
# "$@"
