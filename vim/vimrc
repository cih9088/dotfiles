" VIM-PLUG {{{

    " {{{ vim-plug
        if has('nvim')
            " automatic installation (for Neovim: ~/.local/share/nvim/site/autoload/plug.vim)
            if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
                silent !curl -flo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
                            \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
                autocmd vimenter * pluginstall --sync | source $myvimrc
            endif
            " Specify a directory for plugins (for Neovim: ~/.local/share/nvim/plugged)
            call plug#begin('~/.local/share/nvim/plugged')
            " Make sure you use single quotes
        else
            " automatic installation (for vim: ~/.vim/autoload/plug.vim)
            if empty(glob('~/.vim/autoload/plug.vim'))
                silent !curl -flo ~/.vim/autoload/plug.vim --create-dirs
                            \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
                autocmd vimenter * pluginstall --sync | source $myvimrc
            endif
            " Specify a directory for plugins (for vim: ~/.vim/plugged)
            call plug#begin('~/.vim/plugged')
            " Make sure you use single quotes
        endif
    " }}}

    " Plugins for pretty vim {{{
        "  scheme ============================================
        " Plug 'flazz/vim-colorschemes'
        " Plug 'chriskempson/base16-vim'
        " Plug 'morhetz/gruvbox'
        " Plug 'w0ng/vim-hybrid'
        " Plug 'joshdick/onedark.vim'
        Plug 'junegunn/seoul256.vim'
        Plug 'ryanoasis/vim-devicons'
        " =========================================================

    " }}}

    " Plugins for Language specific (syntax, completion, etc.) {{{
        Plug 'sheerun/vim-polyglot'
        Plug 'Vimjas/vim-python-pep8-indent'  " becase of low performance of vim-polyglot
        Plug 'plasticboy/vim-markdown'
        Plug 'chrisbra/csv.vim'
        Plug 'lervag/vimtex'
        Plug 'ap/vim-css-color'
        " Plug 'RRethy/vim-hexokinase', { 'do': 'make hexokinase' }
        " Plug 'davidhalter/jedi-vim'
        if has('nvim')
            Plug 'numirias/semshi', { 'do': ':UpdateRemotePlugins' }
            Plug 'Shougo/neco-vim'
            Plug 'neoclide/coc-neco'
            Plug 'neoclide/coc.nvim', {'tag': '*', 'branch': 'release'}
        else
            Plug 'Shougo/deoplete.nvim'
            Plug 'roxma/nvim-yarp'
            Plug 'roxma/vim-hug-neovim-rpc'
            Plug 'zchee/deoplete-jedi'
            Plug 'numirias/semshi'
            Plug 'Shougo/echodoc.vim'
        endif
    " }}}

    " Plugins for Convenient coding {{{
        " Plug 'Shougo/neosnippet.vim'
        " Plug 'Shougo/neosnippet-snippets'
        Plug 'Shougo/context_filetype.vim'
        Plug 'sirver/ultisnips'
        Plug 'honza/vim-snippets'
        " Plug 'scrooloose/nerdtree'
        Plug 'justinmk/vim-dirvish' | Plug 'bounceme/remote-viewer'
        " Plug 'tpope/vim-vinegar'
        " Plug 'majutsushi/tagbar'
        Plug 'liuchengxu/vista.vim'
        Plug 'machakann/vim-sandwich'
        " Plug 'easymotion/vim-easymotion'
        Plug 'terryma/vim-multiple-cursors'
        Plug 'scrooloose/nerdcommenter'
        Plug 'Yggdroot/indentLine'
        Plug 'jiangmiao/auto-pairs'
        Plug 'christoomey/vim-tmux-navigator'
        Plug 'tpope/vim-repeat'
        " Plug 'terryma/vim-expand-region'
        Plug 'tpope/vim-fugitive'
        Plug 'tpope/vim-unimpaired'
        Plug 'tpope/vim-obsession'
        Plug 'tpope/vim-eunuch'
        Plug 'tpope/vim-abolish'
        " Plug 'airblade/vim-gitgutter'
        Plug 'mhinz/vim-signify'
        Plug 'kshenoy/vim-signature'
        Plug 'junegunn/vim-easy-align'
        Plug 'kana/vim-textobj-user'
        Plug 'michaeljsmith/vim-indent-object'
        Plug 'idbrii/textobj-word-column.vim'
        Plug 'junegunn/gv.vim'
        " Plug 'yuttie/comfortable-motion.vim'
        " Plug 'chrisbra/NrrwRgn'
        " Plug 'dyng/ctrlsf.vim'
        Plug 'unblevable/quick-scope'
        " Plug 'dhruvasagar/vim-table-mode'
        Plug 'RRethy/vim-illuminate'
        " Plug 'haya14busa/is.vim'
        Plug 'junegunn/vim-peekaboo'
        " Plug 'AndrewRadev/splitjoin.vim'
        Plug 'liuchengxu/vim-which-key', { 'on': ['WhichKey', 'WhichKey!'] }
        Plug 'airblade/vim-rooter'
        if has('nvim')
            set inccommand=nosplit
        else
            Plug 'markonm/traces.vim'
        endif
    " }}}

    " Plugins for etc. {{{
        Plug 'itchyny/lightline.vim'
        Plug 'mgee/lightline-bufferline'
        Plug 'niklaas/lightline-gitdiff'
        Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --all'}
        Plug 'junegunn/fzf.vim'
        Plug 'pbogut/fzf-mru.vim'
        Plug 'junegunn/goyo.vim'
        Plug 'junegunn/limelight.vim'
        " Plug 'metakirby5/codi.vim'
        Plug 'mhinz/vim-startify'
        Plug 'wellle/tmux-complete.vim'
        " Plug 'TaDaa/vimade'
        Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }}
        " Plug 'tmux-plugins/vim-tmux-focus-events'
        " Plug 'jpalardy/vim-slime'
        Plug 'lambdalisue/suda.vim'
    " }}}

    " Initialize plugin system {{{
        call plug#end()
    " }}}

" }}}



" BASIC SETTINGS {{{

    " General {{{
        filetype plugin indent on             " Enable filetype plugins
        set autoread                          " Set to auto read when a file is changed from the outside
        syntax on

        set nocompatible                      " do not compatible to original vi
        set wrap
        set nowrapscan                        " do not go back to the first of the line when it reaches at the end of the line
        set nobackup                          " do not create backup file
        set noswapfile                        " do not create swap file
        set visualbell                        " visualbell on
        set fencs=ucs-bom,utf-8,euc-kr.latin1 " hangle goes euc-kr, unicode goes unicode
        set fileencoding=utf-8                " file saving encoding
        set tenc=utf-8                        " terminal encoding
        set backspace=eol,start,indent        " go to earlier line where the cursor is positioned at end of the line, start of the line and indent
        set hidden                            " unsaved changes in buffer is hidden not quit
        set history=1000                      " remember more commands and search history
        set undofile                          " Maintain undo history between sessions
        set undolevels=1000                   " use many muchos levels of undo
        set undodir=~/.vim/undodir
        set laststatus=2                      " status bar is always on
                                              " set statusline=\ %<%l:%v\ [%P]%=%a\ %h%m%r\ %F\
        set showtabline=2                     " tab bar is always on
        set signcolumn=yes                    " always draw the sign column
        set linebreak
        set colorcolumn=90                    " color column to limit coding length
        set pastetoggle=<F2>                  " when in insert mode, press <F2> to go to
                                              " pasete mode, where you can paste mass data
                                              " that won't be autoindent

        " Set unvisible characters
        set list
        " set breakindent
        set showbreak=↪\
        set listchars=tab:»\ ,nbsp:␣,trail:·,extends:>,precedes:<

        " visual autocomplete for command menu
        set wildmenu
        set wildmode=full
        " set wildmode=list:longest,full
        " Setting up ignores
        set wildignore+=*/tmp/*,*.so,*.pyc,*.png,*.jpg,*.gif,*.jpeg,*.ico,*.pdf
        set wildignore+=*.wav,*.mp4,*.mp3
        set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem
        set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
        set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*
        set wildignore+=*.swp,*~,._*
        set wildignore+=_pycache_,.DS_Store,.vscode,.localized

        " Resize panes whenever containing window resized.
        autocmd VimResized * wincmd =

        " When scrolling, keep cursor 5 lines away from screen border
        set scrolloff=5

        " if file has no extention, set it conf
        au BufNewFile,BufRead * if &ft == '' | set ft=conf | endif
        " autocmd BufNewFile,BufRead * if expand('%:t') !~ '\.' | set syntax=conf | endif

        " diff: ignore whitespaces
        set diffopt+=iwhite

        " only higlight the first 500 characters of each line to improve
        " performance for long line
        " set synmaxcol=500
    " }}}

    " Color scheme {{{
        "Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
        "If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
        "(see < http://sunaku.github.io/tmux-23bit-color.html#usage > for more information.)
        " if (empty($TMUX))
        "     if (has("nvim"))
        "         "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
        "         let $NVIM_TUI_ENABLE_TRUE_COLOR=1
        "     endif
        "     "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
        "     "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
        "     " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
        "     if (has("termguicolors"))
        "         set termguicolors
        "         " set t_8b=[48;2;%lu;%lu;%lum
        "         " set t_8f=[38;2;%lu;%lu;%lum
        "     endif
        " endif

        if (has("termguicolors"))
            set t_8b="[48;2;%lu;%lu;%lum"
            set t_8f="[38;2;%lu;%lu;%lum"
            set termguicolors
        endif

        " set t_Co=256        " Enable 256 color terminal
        syntax enable       " enable syntax processing
        let $NVIM_TUI_ENABLE_TRUE_COLOR=1
        set background=dark " lihgt / dark
        " colorscheme forest-night
        " colorscheme kuroi
        let g:seoul256_background = 237
        colorscheme seoul256
        " colorscheme base16-default-dark
        " colorscheme base17-eighties
        " colorscheme gruvbox
        " colorscheme hybrid
        " colorscheme dracula
        " colorscheme Tomorrow-Night-Eighties
        " colorscheme onedark
        " colorscheme PaperColor

        " seoul 256 terminal color
        let g:terminal_color_0  = '#4e4e4e'
        let g:terminal_color_1  = '#d68787'
        let g:terminal_color_2  = '#5f865f'
        let g:terminal_color_3  = '#d8af5f'
        let g:terminal_color_4  = '#85add4'
        let g:terminal_color_5  = '#d7afaf'
        let g:terminal_color_6  = '#87afaf'
        let g:terminal_color_7  = '#d0d0d0'
        let g:terminal_color_8  = '#626262'
        let g:terminal_color_9  = '#d75f87'
        let g:terminal_color_10 = '#87af87'
        let g:terminal_color_11 = '#ffd787'
        let g:terminal_color_12 = '#add4fb'
        let g:terminal_color_13 = '#ffafaf'
        let g:terminal_color_14 = '#87d7d7'
        let g:terminal_color_15 = '#e4e4e4'
        highlight Pmenu ctermfg=187 guifg=#d7d7af ctermbg=95 guibg=#875f5f
        highlight PmenuSel ctermfg=236 guifg=#3f3f3f ctermbg=224 guibg=#ffdfdf
        " highlight Pmenu ctermfg=252 guifg=#d9d9d9 ctermbg=238 guibg=#565656
        " highlight PmenuSel ctermfg=236 guifg=#3f3f3f ctermbg=224 guibg=#ffdfdf

        " }}}

    " Spaces & Tabs {{{
        set tabstop=4       " number of visual spaces per TAB
        set softtabstop=4   " number of spaces in tab when editing
        set expandtab       " tabs are spaces
        set shiftwidth=4    " auto indent 4
        set cindent         " indent only for C language
        set smartindent     " smart indentation
        set copyindent      " copy the previous indentation on autoindenting
        set autoindent      " always set autoindenting on
    " }}}

    " UI Config {{{
        set ruler           " show line and col
        set relativenumber  " show relative line numbers
        set number          " show absolute line numbers where your cursor is
        set numberwidth=3   " keep the line number gutter narrow
        set showcmd         " show command in bottom bar
        set cursorline      " highlight current line
        filetype indent on  " load filetype-specific index files
        set showmatch       " highlight matching [{()}]
        set title           " change the terminal's title
        set lazyredraw      " redraw only when we need to
        set noshowmode      " for echodoc to hide -- INSERT -- in command line
    " }}}

    " Searching {{{
        set incsearch       " show search matches as you type
        set hlsearch        " highlight mtches
        set ignorecase      " ignore case when searching
        set smartcase       " ignore case if search pattern is all lowercase,
                            " case-sensitive otherwise
    " }}}

    " Folding {{{
        set foldenable          " enable folding
        set foldlevelstart=10   " open most folds by default
        set foldnestmax=10      " 10 nested fold max
        set foldmethod=syntax   " fold based on syntax
        set foldlevel=1
    " }}}

" }}}



" VIM REMAPPING AND FUNCTIONS {{{

    " neovim python support {{{
        let g:python_host_prog = system("echo -n ${HOME}/.virtualenvs/neovim2/bin/python")
        let g:python3_host_prog = system("echo -n ${HOME}/.virtualenvs/neovim3/bin/python")
    " }}}

    " leader is now comma {{{
        map , <leader>
    " }}}

    " Remove trailing whitespaces on save {{{
        fun! StripTrailingWhitespaces()
            let l = line(".")
            let c = col(".")
            %s/\s\+$//e
            call cursor(l, c)
        endfun
        autocmd FileType c,cpp,java,javascript,html,ruby,python,pandoc
            \ autocmd BufWritePre <buffer> :call StripTrailingWhitespaces()
    " }}}

    " Disable few things on file larger than 250mb {{{
        let g:LargeFile = 1024 * 1024 * 250
        augroup LargeFile
            autocmd BufReadPre * let f=getfsize(expand("<afile>")) | if f > g:LargeFile || f == -2 | call LargeFile() | endif
        augroup END

        function LargeFile()
            " no syntax highlighting etc
            " set eventignore+=FileType
            " save memory when other file is viewed
            setlocal bufhidden=unload
            " is read-only (write with :w new_filename)
            setlocal buftype=nowrite
            " no undo possible
            setlocal undolevels=-1
            " display message
            autocmd VimEnter *  echo 'The file is larger than ' . (g:LargeFile / 1024 / 1024) . ' MB, so some options are changed (see .vimrc for details).'
        endfunction
    " }}}

    " Vim jump to the last position when reopening a file {{{
        if has("autocmd")
            au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
        endif
    " }}}

    " work like * and g*, but do not move the cursor and always set hls {{{
        nnoremap * :let @/ = '\<'.expand('<cword>').'\>'\|set hlsearch<C-M>
        nnoremap g* :let @/ = expand('<cword>')\|set hlsearch<C-M>
    " }}}

    " " Turns off vim's crazy default regex characters (very magic) {{{
    "     nnoremap / /\v
    "     vnoremap / /\v
    "     cnoremap s/ s/\v
    " " }}}

    " do not exit from visual mode when shifting {{{
        vnoremap < <gv
        vnoremap > >gv
    " }}}

    " Treat long lines as break lines {{{
        " (useful when moving around in them) but when preceded by a count, 
        " go back to normal and save movement in jumplist lager than 5 
        nnoremap <expr> j v:count ? (v:count > 5 ? "m'" . v:count : '') . 'j' : 'gj'
        nnoremap <expr> k v:count ? (v:count > 5 ? "m'" . v:count : '') . 'k' : 'gk'
    " }}}

    " turn off search highlight {{{
        nmap <leader><space> :nohlsearch<CR>
    " }}}

    " "  keep search pattern in the middle of screen {{{
    "    nnoremap n nzz
    "    nnoremap N Nzz
    " " }}}

    " Make arrow keys do something useful {{{
        nnoremap <Left> :vertical resize +2<CR>
        nnoremap <Right> :vertical resize -2<CR>
        nnoremap <Up> :resize -2<CR>
        nnoremap <Down> :resize +2<CR><Paste>
    " }}}

    " Buffer navigation {{{
        " Go back to previous buffer
        nmap <C-W><tab> :e#<CR>
        " buffer previous
        nnoremap [b :bprevious<CR>
        " buffer next
        nnoremap ]b :bnext<CR>
        " new empty buffer
        nnoremap <C-b> :enew<CR>
        " conform changes (Yes, No, Cancel) instead of error
        " set confirm
        " exit buffer
        nnoremap <leader>bq :bp <BAR> bd #<CR>
    " }}}

    " Tab navigations {{{
        nnoremap [t  :tabprevious<CR>
        nnoremap ]t  :tabnext<CR>
        function! OpenCurrentAsNewTab()
            let l:currentPos = getcurpos()
            tabedit %
            call setpos(".", l:currentPos)
        endfunction
        nnoremap <C-t> :call OpenCurrentAsNewTab()<CR>
        nnoremap <leader>tq :tabclose<CR>
    " }}}

    " Vim Split navigations {{{
        nmap <C-J> <C-W><C-J>
        nmap <C-K> <C-W><C-K>
        nmap <C-L> <C-W><C-L>
        nmap <C-H> <C-W><C-H>
        set splitbelow
        set splitright
        " Vim Split command remapping like tmux
        nmap <C-W>h <C-W>s
        nmap <C-W>x <C-W>q
    " }}}

    " Sudo Save (:Wsudo command) {{{
        command! Wsudo w !sudo tee % > /dev/null
    " }}}

    " <leader>cd : switch to the directory of the current buffer {{{
        nmap <leader>cd :cd %:p:h<CR>
    " }}}

    " <leader>{y,x,p} : {yank,cut,paste} wrt the system clipboard {{{
        map <leader>y "+y
        noremap <leader>x "+x
        noremap <leader>p "+p
    " }}}

    " Search in current visible window {{{
        command! -nargs=1 WinSearch exe '/\%>'.(line('w0')-1).'l'.<q-args>.'\%<'.(line('w$')+1).'l'
        nnoremap z/ :set scrolloff=0<CR>VHoL<Esc>:set scrolloff=1<CR>``/\%V
    " }}}

    " I am too lazy to take my hands from shift {{{
        command! WQ wq
        command! Wq wq
        command! W w
    " }}}

    " Replace a word under the curser and '.' to repeat 'n' to skip (c*) {{{
        let g:should_inject_replace_occurences = 0
        function! MoveToNext()
            if g:should_inject_replace_occurences
                call feedkeys("n")
                call repeat#set("\<Plug>ReplaceOccurences")
            endif

            let g:should_inject_replace_occurences = 0
        endfunction

        augroup auto_move_to_next
            autocmd! InsertLeave * :call MoveToNext()
        augroup END

        nmap <silent> <Plug>ReplaceOccurences :call ReplaceOccurence()<CR>
        nmap <silent> c* :let @/ = '\C\<'.expand('<cword>').'\>'<CR>
            \:set hlsearch<CR>:let g:should_inject_replace_occurences=1<CR>cgn
        vmap <silent> c* :<C-U>
            \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
            \gvy:let @/ = substitute(
            \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR>:set hlsearch<CR>:let g:should_inject_replace_occurences=1<CR>
            \gV:call setreg('"', old_reg, old_regtype)<CR>cgn

        function! ReplaceOccurence()
            " check if we are on top of an occurence
            let l:winview = winsaveview()
            let l:save_reg = getreg('"')
            let l:save_regmode = getregtype('"')
            let [l:lnum_cur, l:col_cur] = getpos(".")[1:2]
            normal! ygn
            let [l:lnum1, l:col1] = getpos("'[")[1:2]
            let [l:lnum2, l:col2] = getpos("']")[1:2]
            call setreg('"', l:save_reg, l:save_regmode)
            call winrestview(winview)

            " if we are on top of an occurence, replace it
            if l:lnum_cur >= l:lnum1 && l:lnum_cur <= l:lnum2 && l:col_cur >= l:col1 && l:col_cur <= l:col2
                exe "normal! cgn\<c-a>\<esc>"
            endif

            call feedkeys("n")
            call repeat#set("\<Plug>ReplaceOccurences")
        endfunction
    " }}}

    " Terminal inside of vim {{{
        " steal from https://github.com/vimlab/split-term.vim
        let s:force_vertical = exists('g:split_term_vertical') ? 1 : 0
        fun! s:openBuffer(count, vertical)
            let cmd = a:vertical ? 'vnew' : 'new'
            let cmd = a:count ? a:count . cmd : cmd
            exe cmd
        endf
        fun! s:openTerm(args, count, vertical)
            let params = split(a:args)
            let direction = s:force_vertical ? 1 : a:vertical

            call s:openBuffer(a:count, direction)
            exe 'terminal' a:args
            exe 'startinsert'
        endf
        command! -count -nargs=* T call s:openTerm(<q-args>, <count>, 0)
        command! -count -nargs=* VT call s:openTerm(<q-args>, <count>, 1)

        tnoremap <Esc> <C-\><C-n>
        au TermOpen term://*fzf* tnoremap <buffer> <Esc> <Esc>
        if has('nvim')
            au TermOpen * setlocal nonumber norelativenumber
        endif
    " }}}

    " Coneallevel control {{{
        function! ToggleConcealLevel()
            if &conceallevel == 0
                setlocal conceallevel=2
            else
                setlocal conceallevel=0
            endif
        endfunction
        nnoremap <silent> yoa :call ToggleConcealLevel()<CR>
    " }}}

    " Change register {{{
        function! ChangeReg() abort
            let r = nr2char(getchar())
            if r =~# '[a-zA-Z0-9"@\-:.%#=*"~_/]'
                call feedkeys("q:ilet @" . r . " = \<C-r>\<C-r>=string(@" . r . ")\<CR>\<ESC>", 'n')
            endif
        endfunction
        nnoremap <silent> rc :call ChangeReg()<CR>
    " }}}

    " Move visual block {{{
        vnoremap J :m '>+1<CR>gv=gv
        vnoremap K :m '<-2<CR>gv=gv
    " }}}

    " {{{ Redirect the output of a Vim or external command into a scratch buffer
        " https://gist.github.com/romainl/eae0a260ab9c135390c30cd370c20cd7
        function! Redir(cmd)
            for win in range(1, winnr('$'))
                if getwinvar(win, 'scratch')
                    execute win . 'windo close'
                endif
            endfor
            if a:cmd =~ '^!'
                if a:cmd =~' %'
                    let cmd = substitute(a:cmd, ' %', ' ' . expand('%:p'), '')
                else
                    let cmd = a:cmd
                endif
                let output = system(matchstr(cmd, '^!\zs.*'))
            else
                redir => output
                execute a:cmd
                redir END
            endif
            vnew
            let w:scratch = 1
            setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile
            call setline(1, split(output, "\n"))
        endfunction

        command! -nargs=1 -complete=command Redir silent call Redir(<q-args>)
        " Usage:
        " 	:Redir hi ............. show the full output of command ':hi' in a scratch window
        " 	:Redir !ls -al ........ show the full output of command ':!ls -al' in a scratch window
    " }}}

    " {{{ Add parentheses to the current line
        " https://vimrcfu.com/snippet/267

        " wrap the current line in (), e.g:
        nnoremap () mMI(<esc>A)<esc>`M

        " wrap the rest of the line in ()
        nnoremap )) mMi(<esc>A)<esc>`M

        " wrap the line so far in ()
        nnoremap (( mMI(<esc>`Mla)<esc>
    " }}}

    " {{{ Change grep to rg if it exists
        if executable('rg')
            set grepprg=rg\ -S\ --vimgrep
        endif
        autocmd QuickFixCmdPost *grep* cwindow"
    " }}}

    " {{{ calulate any things
        nnoremap Q 0yt=A<C-r>=<C-r>"<CR><Esc>
        vnoremap Q c<C-r>=<C-r>"<CR><Esc>
    " }}}

    " {{{ yanking 
        " reselect the yanked region with `gb`
        nnoremap <expr> gb '`[' . strpart(getregtype(), 0, 1) . '`]'
        " paste without yanking in visual mode with `P`
        xnoremap <expr> P '"_d"'.v:register.'P'
    " }}}


" }}}

" PLUGIN SETTING {{{

    " " NERDtree {{{
    "     nmap <leader>N :NERDTreeToggle<CR>
    "     let NERDTreeQuitOnOpen = 1
    "     let NERDTreeMinimalUI = 1
    "     let NERDTreeDirArrows = 1
    "     let g:WebDevIconsUnicodeDecorateFolderNodes = 1
    "     " automatically close nerdtree if it is the only left window
    "     autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
    "     " startup Options (do NOT show automatically)
    "     let g:nerdtree_tabs_open_on_console_startup = 0
    "     let g:nerdtree_tabs_open_on_gui_startup = 0
    "     " filter out some files, by extension
    "     let NERDTreeIgnore = ['\.pyc$', '\.class$', '\.o$']
    "     " NERDTress File highlighting
    "     function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
    "         exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
    "         exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
    "     endfunction
    "     call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
    "     call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
    "     call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
    "     call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
    "     call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
    "     call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
    "     call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
    "     call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
    "     call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
    "     call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
    "     call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
    "     call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
    "     call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
    " " }}}

    " NERDcommenter {{{
        " Add spaces after comment delimiters by default
        let g:NERDSpaceDelims = 1
        " Use compact syntax for prettified multi-line comments
        let g:NERDCompactSexyComs = 1
        " Align line-wise comment delimiters flush left instead of following code indentation
        let g:NERDDefaultAlign = 'left'
        " Set a language to use its alternate delimiters by default
        let g:NERDAltDelims_java = 1
        " Add your own custom formats or override the defaults
        let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
        " Allow commenting and inverting empty lines (useful when commenting a region)
        let g:NERDCommentEmptyLines = 1
        " Enable trimming of trailing whitespace when uncommenting
        let g:NERDTrimTrailingWhitespace = 1
        " Enable NERDCommenterToggle to check all selected lines is commented or not 
        let g:NERDToggleCheckAllLines = 1
    " }}}

    " fugitive {{{
        nnoremap <leader>G :Gstatus<CR>
    " }}}

    " lightline {{{

        let g:lightline#bufferline#show_number = 0
        let g:lightline#bufferline#shorten_path = 1
        let g:lightline#bufferline#unicode_symbols = 2
        let g:lightline#bufferline#unnamed = '[No Name]'
        let g:lightline#gitdiff#indicator_added = "+"
        let g:lightline#gitdiff#indicator_deleted = "-"
        let g:lightline#gitdiff#indicator_modified = "!"
        let g:lightline = {}
        let g:lightline = {
                    \ 'colorscheme': 'seoul256_modified',
                    \ 'active': {
                    \     'left': [
                    \           [ 'mode', 'paste' ],
                    \           [ 'cocstatus', 'currentfunction', 'readonly', 'filename' ],
                    \           [ 'coc_error' ], [ 'coc_warning' ],
                    \     ],
                    \     'right': [
                    \           [ 'lineinfo' ],
                    \           [ 'percent' ],
                    \           [ 'fileformat', 'fileencoding', 'devicons_filetype' ]
                    \     ],
                    \ },
                    \ 'tab': {
                    \     'active': [ 'tabnum' ],
                    \     'inactive': [ 'tabnum' ],
                    \ },
                    \ 'tabline': {
                    \     'left': [ [ 'tabs', 'vim_logo', 'buffers'] ],
                    \     'right': [ [ 'gitbranch'], [ 'gitdiff' ] ],
                    \ },
                    \ 'component': {
                    \     'vim_logo': "\ue7c5",
                    \ },
                    \ 'component_function': {
                    \     'readonly': 'LightlineReadonly',
                    \     'gitbranch': 'LightlineFugitive',
                    \     'filename': 'LightlineFilename',
                    \     'fileformat': 'LightlineFileformat',
                    \     'filetype': 'LightlineFiletype',
                    \     'fileencoding': 'LightlineFileencoding',
                    \     'currentfunction': 'CocCurrentFunction',
                    \     'devicons_filetype': 'Devicons_Filetype',
                    \     'devicons_fileformat': 'Devicons_Fileformat',
                    \     'cocstatus' : 'CocStatus',
                    \ },
                    \ 'component_expand': {
                    \    'buffers': 'lightline#bufferline#buffers',
                    \    'gitdiff': 'lightline#gitdiff#get',
                    \    'coc_error': 'CocError',
                    \    'coc_warning': 'CocWarning',
                    \ },
                    \ 'component_type': {
                    \    'buffers': 'tabsel',
                    \ },
                    \ }

        autocmd User CocDiagnosticChange call lightline#update()

        function! CocCurrentFunction()
            return get(b:, 'coc_current_function', '')
        endfunction
        function! Devicons_Filetype()
            return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
        endfunction
        function! Devicons_Fileformat()
            return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
        endfunction
        function! LightlineFileformat()
            return winwidth(0) > 70 ? &fileformat : ''
        endfunction
        function! LightlineFiletype()
            return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
        endfunction
        function! LightlineFileencoding()
            return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
        endfunction
        function! LightlineModified()
            return &ft =~ 'help\|vimfiler' ? '' : &modified ? '+' : &modifiable ? '' : '-'
        endfunction
        function! LightlineReadonly()
            return &ft !~? 'help\|vimfiler' && &readonly ? '' : ''
        endfunction
        function! LightlineFilename()
            return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
                        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
                        \  &ft == 'unite' ? unite#get_status_string() :
                        \  &ft == 'vimshell' ? vimshell#get_status_string() :
                        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
                        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
        endfunction
        function! LightlineFugitive()
            if &ft !~? 'vimfiler' && exists('*fugitive#head')
                if fugitive#head() !=# ''
                    return fugitive#head() .  " " . "\ue725"
                endif
            else
                return "\uf468"
            endif
        endfunction
        function! CocStatus() abort
            let info = get(g:, 'coc_status', '')
            if empty(info)
                return ''
            else
                return winwidth(0) > 100 ? (info): ''
            endif
        endfunction
        function! CocError() abort
            let info = get(b:, 'coc_diagnostic_info', {})
            if empty(info) | return '' | endif
            let msgs = []
            if get(info, 'error', 0)
                call add(msgs, 'E' . info['error'])
            endif
            return msgs
        endfunction
        function! CocWarning() abort
            let info = get(b:, 'coc_diagnostic_info', {})
            if empty(info) | return '' | endif
            let msgs = []
            if get(info, 'warning', 0)
                call add(msgs, 'W' . info['warning'])
            endif
            return msgs
        endfunction

    " }}}

    " " Easymotion {{{
    "     " Disable default mappings
    "     let g:EasyMotion_do_mapping = 0
    "     " s{char}{char} to move to {char}{char}
    "     nmap s <Plug>(easymotion-overwin-f2)
    "     " Turn on case insensitive feature
    "     let g:EasyMotion_smartcase = 1
    " " }}}

    " " multiplecusors {{{
    "     " Disable Deoplete when selecting multiple cursors starts
    "     function g:Multiple_cursors_before()
    "         call deoplete#custom#buffer_option('auto_complete', v:false)
    "     endfunction
    "     function g:Multiple_cursors_after()
    "         call deoplete#custom#buffer_option('auto_complete', v:true)
    "     endfunction
    " " }}}

    " vim-easy-align {{{
        " Start interactive EasyAlign in visual mode (e.g. vipga)
        xmap ga <Plug>(EasyAlign)
        " Start interactive EasyAlign for a motion/text object (e.g. gaip)
        nmap ga <Plug>(EasyAlign)
    " }}}

    " Indentlines {{{
        " let g:indentLine_setColors = 0
        let g:indentLine_enabled = 1
        let g:indentLine_char = '│'
        " let g:indentLine_char = '┊'
        " let g:indentLine_char_list = ['|', '¦', '┆', '┊']
    " }}}

    " Goyo {{{
        let g:hoyo_width = 120
    " }}}

    " Limelight {{{
        " Color name (:help cterm-colors) or ANSI code
        let g:limelight_conceal_ctermfg = 'gray'
        let g:limelight_conceal_ctermfg = 240
        " Color name (:help gui-colors) or RGB color
        let g:limelight_conceal_guifg = 'DarkGray'
        let g:limelight_conceal_guifg = '#777777'
        " Default: 0.5
        let g:limelight_default_coefficient = 0.7
        " Number of preceding/following paragraphs to include (default: 0)
        let g:limelight_paragraph_span = 1
        " Beginning/end of paragraph
        "   When there's no empty line between the paragraphs
        "   and each paragraph starts with indentation
        let g:limelight_bop = '^\s'
        let g:limelight_eop = '\ze\n^\s'
        " Highlighting priority (default: 10)
        "   Set it to -1 not to overrule hlsearch
        let g:limelight_priority = -1
        autocmd! User GoyoEnter Limelight
        autocmd! User GoyoLeave Limelight!
    " }}}

    " " Tagbar {{{
    "     nmap <Leader>T :TagbarToggle<CR>
    "     autocmd VimEnter * nested :TagbarOpen
    " " }}}

    " Signature {{{
        let g:SignatureMarkTextHLDynamic = 1
    " }}}

    " " deoplete {{{
    "     let g:deoplete#enable_at_startup = 1
    "     call deoplete#custom#option({
    "                 \ 'auto_complete_delay': 20,
    "                 \ 'auto_refresh_delay': 30,
    "                 \ 'skip_chars': ['(', ')', '<', '>'],
    "                 \ 'num_processes': 4,
    "                 \ 'min_pattern_length': 2,
    "                 \ })
    "
    "     " automatically close preview window
    "     autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
    "
    "     " suppress the annoying 'match x of y', 'The only match' and 'Pattern not
    "     " found' messages
    "     " set shortmess+=c
    "
    "     " set completeopt+=noinsert
    "     " set completeopt-=preview
    "
    "
    "     " Register some default omnicomplete functions/patterns
    "     " to automatically trigger in deoplete {{
    "     " let g:deoplete#omni#functions = get(g:, 'deoplete#omni#functions', {})
    "     " let g:deoplete#omni#input_patterns = get(g:, 'deoplete#omni#input_patterns', {})
    "     "
    "     " let g:deoplete#omni#functions.tex = ['vimtex#complete#omnifunc']
    "     " let g:deoplete#omni#input_patterns.tex =
    "     "       \ '(?:'
    "     "       \ . '\\\w*'
    "     "       \ . ')'
    "
    "     " deoplete-clang
    "     " if filereadable('/usr/lib/llvm-3.8/lib/libclang.so.1')
    "     "     let g:deoplete#sources#clang#libclang_path = '/usr/lib/llvm-3.8/lib/libclang.so.1'
    "     " elseif filereadable('/Library/Developer/CommandLineTools/usr/lib/libclang.dylib')
    "     "     let g:deoplete#sources#clang#libclang_path = '/Library/Developer/CommandLineTools/usr/lib/libclang.dylib'
    "     " endif
    "     "
    "     " if isdirectory('/usr/include/clang')
    "     "     let g:deoplete#sources#clang#clang_header = '/usr/include/clang/'
    "     " elseif isdirectory('/Library/Developer/CommandLineTools/usr/lib/clang/')
    "     "     let g:deoplete#sources#clang#clang_header = '/Library/Developer/CommandLineTools/usr/lib/clang/'
    "     " endif
    "
    "     " <CR>: If popup menu visible, expand snippet or close popup with selection,
    "     "       Otherwise, just put '<CR>'
    "     " inoremap <silent><expr><CR> pumvisible() ?
    "     "     \ (neosnippet#expandable() ? neosnippet#mappings#expand_impl() : deoplete#close_popup())
    "     "         \ :  "\<CR>"
    "
    "     " <Tab> completion:
    "     " 1. If popup menu is visible, select and insert next item
    "     " 2. Otherwise, if within a snippet, jump to next input
    "     " 3. Otherwise, if preceding chars are whitespace, insert tab char
    "     " 4. Otherwise, start manual autocomplete
    "     imap <silent><expr><Tab> pumvisible() ? "\<C-n>"
    "         \ : (neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)"
    "         \ : (<SID>is_whitespace() ? "\<Tab>"
    "         \ : deoplete#manual_complete()))
    "
    "     smap <silent><expr><Tab> pumvisible() ? "\<C-n>"
    "         \ : (neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)"
    "         \ : (<SID>is_whitespace() ? "\<Tab>"
    "         \ : deoplete#manual_complete()))
    "
    "     inoremap <expr><S-Tab> pumvisible() ? "\<C-p>" : "\<C-h>"
    "
    "     function! s:is_whitespace()
    "         let col = col('.') - 1
    "         return ! col || getline('.')[col - 1] =~? '\s'
    "     endfunction
    "
    "     function! s:is_back_space()
    "         let col = col('.') - 1
    "         return ! col || getline('.')[col - 1] =~ s
    "     endfunction
    " " }}}

    " Ultisnips {{{
        let g:UltiSnipsExpandTrigger="<c-j>"
        let g:UltiSnipsJumpForwardTrigger="<c-j>"
        let g:UltiSnipsJumpBackwardTrigger="<c-k>"
        let g:UltiSnipsEditSplit="vertical"
        let g:UltiSnipsSnippetDirectories = ['UltiSnips', 'snips']
    " }}}

    " " neosnippet {{{
    "     let g:neosnippet#snippets_directory='~/.local/share/nvim/plugged/vim-snippets/snippets'
    "
    "     " Plugin key-mappings.
    "     " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    "     imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    "     smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    "     xmap <C-k>     <Plug>(neosnippet_expand_target)
    "     " let g:neosnippet#enable_eompleted_snippet = 1
    " " }}}

    " coc {{{
        " Smaller updatetime for CursorHold & CursorHoldI
        set updatetime=300

        " Better display for messages
        set cmdheight=2

        " don't give |ins-completion-menu| messages.
        set shortmess+=c

        " automatically close preview window
        autocmd InsertLeave * if pumvisible() == 0 | pclose | endif

        " automatically change interpreterpath
        autocmd FileType python !~/.config/nvim/update_coc_settings.sh

        " Use tab for trigger completion with characters ahead and navigate.
        " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
        inoremap <silent><expr> <TAB>
                    \ pumvisible() ? "\<C-n>" :
                    \ <SID>check_back_space() ? "\<TAB>" :
                    \ coc#refresh()
        inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

        function! s:check_back_space() abort
          let col = col('.') - 1
          return !col || getline('.')[col - 1]  =~# '\s'
        endfunction

        " Use <c-space> for trigger completion.
        inoremap <silent><expr> <c-space> coc#refresh()

        " Use <cr> for confirm completion.
        " Coc only does snippet and additional edit on confirm.
        inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
        " Or use `complete_info` if your vim support it, like:
        " inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

        " Use `[d` and `]d` for navigate diagnostics
        nmap <silent> [d <Plug>(coc-diagnostic-prev)
        nmap <silent> ]d <Plug>(coc-diagnostic-next)

        " Remap keys for gotos
        nmap <silent> gd <Plug>(coc-definition)
        nmap <silent> gy <Plug>(coc-type-definition)
        nmap <silent> gi <Plug>(coc-implementation)
        nmap <silent> gr <Plug>(coc-references)

        " Use K for show documentation in preview window
        nnoremap <silent> K :call <SID>show_documentation()<CR>

        function! s:show_documentation()
          if (index(['vim','help'], &filetype) >= 0)
            execute 'h '.expand('<cword>')
          else
            call CocAction('doHover')
          endif
        endfunction

        " Highlight symbol under cursor on CursorHold
        autocmd CursorHold * silent call CocActionAsync('highlight')

        " Remap for rename current word
        nmap <leader>rn <Plug>(coc-rename)

        " Remap for format selected region
        vmap <leader>f  <Plug>(coc-format-selected)
        nmap <leader>f  <Plug>(coc-format-selected)

        augroup mygroup
            autocmd!
            " Setup formatexpr specified filetype(s).
            autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
            " Update signature help on jump placeholder
            autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
        augroup end

        " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
        vmap <leader>a  <Plug>(coc-codeaction-selected)
        nmap <leader>a  <Plug>(coc-codeaction-selected)

        " Remap for do codeAction of current line
        nmap <leader>ac  <Plug>(coc-codeaction)
        " Fix autofix problem of current line
        nmap <leader>qf  <Plug>(coc-fix-current)

        " Create mappings for function text object, requires document symbols feature of languageserver.
        xmap if <Plug>(coc-funcobj-i)
        xmap af <Plug>(coc-funcobj-a)
        omap if <Plug>(coc-funcobj-i)
        omap af <Plug>(coc-funcobj-a)

        " Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
        nmap <silent> <C-d> <Plug>(coc-range-select)
        xmap <silent> <C-d> <Plug>(coc-range-select)

        " Use <C-l> to trigger snippet expand.
        imap <C-l> <Plug>(coc-snippets-expand)
        " Use <C-j> to select text for visual text of snippet.
        vmap <C-j> <Plug>(coc-snippets-select)
        " Use <C-j> to jump to forward placeholder, which is default
        let g:coc_snippet_next = '<c-j>'
        " Use <C-k> to jump to backward placeholder, which is default
        let g:coc_snippet_prev = '<c-k>'
        " Use <C-j> for both expand and jump (make expand higher priority.)
        imap <C-j> <Plug>(coc-snippets-expand-jump)

        " Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
        nmap <silent> <C-d> <Plug>(coc-range-select)
        xmap <silent> <C-d> <Plug>(coc-range-select)

        " Use `:Format` to format current buffer
        command! -nargs=0 Format :call CocAction('format')

        " Use `:Fold` to fold current buffer
        command! -nargs=? Fold :call     CocAction('fold', <f-args>)

        " use `:OR` for organize import of current buffer
        command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

        " Add status line support, for integration with other plugin, checkout `:h coc-status`
        set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

        " Using CocList
        " Show all diagnostics
        nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
        " Manage extensions
        nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
        " Show commands
        nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
        " Find symbol of current document
        nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
        " Search workspace symbols
        nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
        " Do default action for next item.
        nnoremap <silent> <space>j  :<C-u>CocNext<CR>
        " Do default action for previous item.
        nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
        " Resume latest coc list
        nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

        " nnoremap <expr><C-f> coc#util#has_float() ? coc#util#float_scroll(1) : "\<C-f>"
        " nnoremap <expr><C-b> coc#util#has_float() ? coc#util#float_scroll(0) : "\<C-b>"
    " }}}

    " " LanguageClient {{{
    "     let g:LanguageClient_serverCommands = {
    "         \ 'python': [system("echo -n ${HOME}/.local/bin/pyls")],
    "         \ 'sh': [system("echo -n ${HOME}/.local/bin/bash-language-server"), 'start'],
    "         \ }
    "     let g:LanguageClient_diagnosticsEnable = 1
    "
    "     nnoremap <F5> :call LanguageClient_contextMenu()<CR>
    "     nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
    "     nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
    " " }}}

    " echodoc {{{
        if ! has('nvim')
            let g:echodoc#enable_at_startup = 1
            let g:echodoc#type = 'signature'
        endif
    " }}}

    " vim-startify {{{
        nnoremap <leader>S :Startify<CR>

        let g:startify_bookmarks = [
                    \ { 'a': '~/dotfiles/vim/vimrc' },
                    \ { 's': '~/dotfiles/zsh/zshrc' },
                    \ { 'd': '~/dotfiles/zsh/zpreztorc' },
                    \ { 'f': '~/dotfiles/tmux/tmux.conf' }
                    \]
        let g:startify_change_to_dir = 0
    " }}}

    " FZF {{{
        nnoremap <leader>F :Files<CR>
        nnoremap <leader>B :Buffers<CR>
        nnoremap <leader>H :History<CR>
        nnoremap <leader>C :Commits<CR>
        nnoremap <leader>L :BLines<CR>
        nnoremap <leader>P :ProjectFiles<CR>
        nnoremap <leader>M :FZFMru<CR>

        " Search project root
        function! s:find_git_root()
            return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
        endfunction
        command! ProjectFiles execute 'Files' s:find_git_root()

        " Customize fzf colors to match your color scheme
        let g:fzf_colors =
                    \ {
                    \ 'fg':      ['fg', 'Normal'],
                    \ 'bg':      ['bg', 'Normal'],
                    \ 'hl':      ['fg', 'Comment'],
                    \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
                    \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
                    \ 'hl+':     ['fg', 'Statement'],
                    \ 'info':    ['fg', 'PreProc'],
                    \ 'border':  ['fg', 'Ignore'],
                    \ 'prompt':  ['fg', 'Conditional'],
                    \ 'pointer': ['fg', 'Exception'],
                    \ 'marker':  ['fg', 'Keyword'],
                    \ 'spinner': ['fg', 'Label'],
                    \ 'header':  ['fg', 'Comment'] }

        " Likewise, Files command with preview window
        command! -bang -nargs=? -complete=dir Files
                    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

        " Rg: start fzf
        " Rg!: start fzf with preview window
        command! -bang -nargs=* Rg
          \ call fzf#vim#grep(
          \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
          \   <bang>0 ? fzf#vim#with_preview('up:60%')
          \           : fzf#vim#with_preview('right:50%:hidden', '?'),
          \   <bang>0)

    " }}}

    " Semshi {{{
        function CustomSemshiHighlights()
            hi semshiLocal           ctermfg=209 guifg=#ff875f
            hi semshiGlobal          ctermfg=214 guifg=#ffaf00
            hi semshiImported        ctermfg=214 guifg=#ffaf00 cterm=bold gui=bold
            hi semshiParameter       ctermfg=75  guifg=#5fafff
            hi semshiParameterUnused ctermfg=117 guifg=#87d7ff cterm=underline gui=underline
            hi semshiFree            ctermfg=218 guifg=#ffafd7
            hi semshiBuiltin         ctermfg=207 guifg=#ff5fff
            hi semshiAttribute       ctermfg=49  guifg=#00ffaf
            hi semshiSelf            ctermfg=249 guifg=#b2b2b2
            hi semshiUnresolved      ctermfg=226 guifg=#ffff00 cterm=underline gui=underline
            hi semshiSelected        ctermfg=231 guifg=#ffffff ctermbg=161 guibg=#d7005f

            hi! def link  semshiBuiltin  Structure
            " hi! def link semshiSelf Identifier
            " hi semshiSelf           ctermfg=174     guifg=#d78787
            hi semshiAttribute      ctermfg=121     guifg=#87ffaf
            hi semshiParameter      ctermfg=103     guifg=#8787af
        endfunction
        autocmd FileType python call CustomSemshiHighlights()
        let g:semshi#error_sign = 0
    " }}}

    " vim-polyglot {{{
        let g:polyglot_disabled = ['latex', 'python', 'python-ident']
    " }}}

    " nrrwrgn {{{
    " }}}

    " vim-markdown {{{
        let g:vim_markdown_math = 1
    " }}}

    " ctrlsf {{{
        nmap     <C-F>f <Plug>CtrlSFPrompt
        vmap     <C-F>f <Plug>CtrlSFVwordPath
        vmap     <C-F>F <Plug>CtrlSFVwordExec
        nmap     <C-F>n <Plug>CtrlSFCwordPath
        nmap     <C-F>p <Plug>CtrlSFPwordPath
        nnoremap <C-F>o :CtrlSFOpen<CR>
        nnoremap <C-F>t :CtrlSFToggle<CR>
        inoremap <C-F>t <Esc>:CtrlSFToggle<CR>

        let g:ctrlsf_default_root = 'project'
        let g:ctrlsf_winsize = '50%'
    " }}}

    " vim-sandwich {{{
        " if you have not copied default recipes
        let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)

        " add spaces inside braket
        let g:sandwich#recipes += [
              \   {'buns': ['{ ', ' }'], 'nesting': 1, 'match_syntax': 1, 'kind': ['add', 'replace'], 'action': ['add'], 'input': ['{']},
              \   {'buns': ['[ ', ' ]'], 'nesting': 1, 'match_syntax': 1, 'kind': ['add', 'replace'], 'action': ['add'], 'input': ['[']},
              \   {'buns': ['( ', ' )'], 'nesting': 1, 'match_syntax': 1, 'kind': ['add', 'replace'], 'action': ['add'], 'input': ['(']},
              \   {'buns': ['{\s*', '\s*}'],   'nesting': 1, 'regex': 1, 'match_syntax': 1, 'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'], 'input': ['{']},
              \   {'buns': ['\[\s*', '\s*\]'], 'nesting': 1, 'regex': 1, 'match_syntax': 1, 'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'], 'input': ['[']},
              \   {'buns': ['(\s*', '\s*)'],   'nesting': 1, 'regex': 1, 'match_syntax': 1, 'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'], 'input': ['(']},
              \ ]
    " }}}

    " vim-table-mode {{{
        let g:table_mode_corner='|'
        " let g:table_mode_corner_corner='+'
        " let g:table_mode_header_fillchar='='
    " }}}

    " quick-scope {{{
        let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
        highlight QuickScopePrimary guifg='#afff5f' gui=underline ctermfg=155 cterm=underline
        highlight QuickScopeSecondary guifg='#5fffff' gui=underline ctermfg=81 cterm=underline
        " augroup qs_colors
        "     autocmd!
        "     autocmd ColorScheme * highlight QuickScopePrimary guifg='#afff5f' gui=underline ctermfg=155 cterm=underline
        "     autocmd ColorScheme * highlight QuickScopeSecondary guifg='#5fffff' gui=underline ctermfg=81 cterm=underline
        " augroup END
    " }}}

    " vim-illuminate {{{
        hi illuminatedWord        ctermfg=231 guifg=#ffffff ctermbg=161 guibg=#d7005f
        let g:Illuminate_ftblacklist = ['nerdtree', 'python', 'tagbar']
        let g:Illuminate_delay = 500
    " }}}

    " csv {{{
        let g:csv_delim_test = ',;|'
    " }}}

    " python-syntax {{{
        " let g:python_highlight_all = 1
    " }}}

    " auto-pair {{{
        let g:AutoPairsFlyMode = 0
    " }}}

    " vim-dirvish {{{
        let g:dirvish_mode = ':sort ,^.*[\/],'

        augroup dirvish_config
            autocmd!

            " Map `gr` to reload.
            autocmd FileType dirvish nnoremap <silent><buffer>
                        \ gr :<C-U>Dirvish %<CR>

            " Map `gh` to hide dot-prefixed files. Press `R` or `gr` to "toggle" (reload).
            autocmd FileType dirvish nnoremap <silent><buffer>
                        \ gh :silent keeppatterns g@\v/\.[^\/]+/?$@d _<cr>:setl cole=3<cr>

            " Map ~ to go ${HOME} directory
            autocmd FileType dirvish nnoremap <silent><buffer>
                        \ g~ :<C-U>Dirvish ~<CR>
        augroup END
    " }}}

    " tmux-vim-navigator {{{
        let g:tmux_navigator_no_mappings = 1

        nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
        nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
        nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
        nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
        nnoremap <silent> <C-\> :TmuxNavigatePrevious<cr>
        " Disable tmux navigator when zooming the Vim pane
        let g:tmux_navigator_disable_when_zoomed = 1
    " }}}

    " vim-rooter {{{
        nnoremap <leader>R :Rooter<CR>
        let g:rooter_manual_only = 1
    " }}}

    " vim-which-key {{{
        nnoremap <silent> <leader>      :<c-u>WhichKey '\'<CR>
    " }}}

    " vimade {{{
        let g:vimade = {
                    \ "normalid": '',
                    \ "normalncid": '',
                    \ "basefg": '',
                    \ "basebg": '',
                    \ "fadelevel": 0.6,
                    \ "colbufsize": 1,
                    \ "rowbufsize": 0,
                    \ "checkinterval": 100,
                    \ "usecursorhold": 0,
                    \ "detecttermcolors": 0,
                    \ 'enablescroll': 0,
                    \ 'fadepriority': 10,
                    \ 'groupdiff': 1,
                    \ 'groupscrollbind': 0,
                    \ 'enablefocusfading': 1,
                    \ }
    " }}}

    " unimpaired {{{
        let g:nremap = {"[t": "", "]t": "", "[T": "", "]T": ""}
    " }}}

    " vim-slime {{{
        let g:slime_target = "tmux"
        let g:slime_default_config = {"socket_name": "default", "target_pane": "{right-of}"}
    " }}}

    " vimtex {{{
        let g:tex_flavor='latex'
        let g:vimtex_view_method='zathura'
        let g:vimtex_quickfix_mode=0
        let g:tex_conceal='abdmg'
    " }}}

    " markdown-preview {{{
        let g:mkdp_open_to_the_world = 1
        let g:mkdp_port = '31000'
    " }}}

    " {{{ vista
        " let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
        let g:vista#renderer#enable_icon = 1
        let g:vista_default_executive = 'ctags'
        let g:vista_executive_for = {
                    \ 'sh': 'coc',
                    \ 'python': 'coc',
                    \ 'yaml': 'coc',
                    \ 'tex': 'coc',
                    \ }

        nmap <Leader>T :Vista!!<CR>
    " }}}

    " {{{ suda
        let g:suda_smart_edit = 1
    " }}}

    " {{{
        " let g:Hexokinase_highlighters = ['backgroundfull']
    " }}}

" }}}

" vim:foldmethod=marker:foldmarker={{{,}}}:foldlevel=1
