# tm - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
# `tm` will allow you to select your tmux session via fzf.
# `tm irc` will attach to the irc session (if it exists), else it will create it.

has -v tmux fzf

if tmux ls >/dev/null 2>&1; then
  _CUR_COLOUR_SCHEME=$(tmux show-environment COLOUR_SCHEME | awk -F'=' '{print $2}')
  _CUR_BG_LUMINANCE=$(tmux show-environment BG_LUMINANCE | awk -F'=' '{print $2}')

  if [[ $_CUR_BG_LUMINANCE != $BG_LUMINANCE || $_CUR_COLOUR_SCHEME != $COLOUR_SCHEME ]]; then

    # update tmux environment
    tmux set-environment BG_LUMINANCE $BG_LUMINANCE
    tmux set-environment COLOUR_SCHEME $COLOUR_SCHEME

    # source tmux config
    tmux source-file $HOME/.tmux.conf

    # change vim colourscheme in all tmux session
    sessions=($(tmux list-sessions -F '#{session_name}'))
    for session in "${sessions[@]}"; do
      windows=($(tmux list-windows -t ${session} -F '#{session_name}:#{window_index}'))
      is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -Ei '^[^TXZ]+ +(\S+\/)?g?(view|n?vim?x?)(diff)?$'"
      for window in "${windows[@]}"; do
        panes=($(tmux list-panes -F '#{session_name}:#{window_index}.#{pane_index}' -t $window))
        for pane in "${panes[@]}"; do
          (
            nohup bash -c "\
              tmux if-shell -t '$pane' \"$is_vim\" 'send-keys -t \"$pane\" ESCAPE ENTER';\
              tmux if-shell -t '$pane' \"$is_vim\" 'send-keys -t \"$pane\" \":call ChangeBackground()\" ENTER'" \
              >/dev/null 2>&1 &
          )
        done
      done
    done

  fi

  [[ -n $TMUX ]] && change="switch-client" || change="attach-session"
  if [ "$1" ]; then
    tmux $change -t "$1" 2>/dev/null \
      || (tmux new-session -d -s "$1" && tmux $change -t "$1")
    return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --select-1 --exit-0) \
    && tmux $change -t "$session" \
    || echo "No sessions found."
else
  tmux
fi
