# expected .ssh/config
#
# Host foo
# #alias bar sample_group
#   HostName foo.example.com
#   HostName 192.168.1.1


_SSH_CONFIG=${SSH_CONFIG:-$HOME/.ssh/config}


has() {
  local verbose=0
  if [[ $1 = '-v' ]]; then
    verbose=1
    shift
  fi
  for c; do c="${c%% *}"
    if ! command -v "$c" &> /dev/null; then
      (( verbose > 0 )) && printf "\033[1;31m%s\033[0m not found.\n" "$c" >&2
      return 1
    fi
  done
}



# TODO: develop more
is_first_destination() {
  # no argument
  [ $# -eq 0 ] && return 1

  # user@host
  [[ "$1" == *"@"* ]] && return 0

  # ip
  [[ "$1" =~ '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$' ]] && return 0

  # domain
  [[ "$1" =~ '.*\..*' ]] && return 0

  # alias in .ssh/config
  [ -f $_SSH_CONFIG ] && grep -q "^Host $1\$" $_SSH_CONFIG && return 0

  # not an option
  [[ $1 != "-"* ]] && return 0

  return 1
}

parse_config() {
  targets=$(awk '
  BEGIN { current = ""; hosts[0] = ""; hostnames[0] = ""; ips[0] = ""; aliases[0] = "" }
  {
    if ($1 == "Host") {
      if ( current != $2 ) {
        current = $2
        hosts[current] = $2
      }
    }
    else if ( $1 == "HostName") {
      if ( $2 ~ /[a-zA-Z]+/ ) {
        if ( hostnames[current] == "" ) {
          hostnames[current] = $2
        } else {
          hostnames[current] = hostnames[current] " / " $2
        }
      } else if ( $2 ~ /[0-9.]+/ ) {
        ips[current] = ips[current] "( " $2 " )"
      }
    }
    else if ( $1 == "#alias" ) {
      aliases[current] = "["
      for(i=2;i<=NF;i++) {
        aliases[current] = aliases[current] " " $i
      }
      aliases[current] = aliases[current] " ]"
    }
  }
  END {
    for (key in hosts) {
      if ( key != 0 ) {
        print hosts[key], "|->", hostnames[key], "|", ips[key], "|" aliases[key]
      }
    }
  }
  ' $_SSH_CONFIG | sort --version-sort | grep -v '*' | column -t -s '|')

  exit_code=$?
  [ ${exit_code} != 0 ] && return ${exit_code}
  targets=($(echo "${targets}" \
    | fzf --bind 'ctrl-a:select-all' --multi \
      --height=40% --cycle --no-sort --layout=reverse \
      --preview-window=up:2 \
      --preview='cat '"$_SSH_CONFIG"' | grep Host \
      | awk -v host={} '"'"'{
        split(host, fld, /->/)
        gsub(/[ \t]+$/, "", fld[1])
        if ($0~fld[1]) {
          getline
          gsub(/^[ \t]+/,"", $0)
          print
          getline
          if ($0 ~ /HostName/) {
            gsub(/^[ \t]+/,"", $0)
            print
          }
        }
      }'"'" \
        | awk '{print $1}'))
  echo "${targets[@]}"
}

if [ "$1" = "gcp" ]; then
  # gcp plugin
  has -v ssh-gcp || return 1
  shift; ssh-gcp $@

elif is_first_destination "$@";  then
  if [ -t 0 ] && ps -p $$ -o ppid= \
    | xargs -I{} ps -p {} -o comm= \
    | grep -qw tmux; then
    # Note: Options without parameter were hardcoded,
    # in order to distinguish an option's parameter from the destination.
    #
    #                   s/[[:space:]]*\(\( | spaces before options
    #     \(-[46AaCfGgKkMNnqsTtVvXxYy]\)\| | option without parameter
    #                     \(-[^[:space:]]* | option
    # \([[:space:]]\+[^[:space:]]*\)\?\)\) | parameter
    #                      [[:space:]]*\)* | spaces between options
    #                        [[:space:]]\+ | spaces before destination
    #                \([^-][^[:space:]]*\) | destination
    #                                   .* | command
    #                                 /\6/ | replace with destination
    # tmux set-option -p pane-border-format '#[bg=colour239] #[bg=colour240]#T#[bg=colour239] #[default]'
    # tmux select-pane -T "$(echo "$@" \
    tmux select-pane -T "$(echo "$@" \
      | sed 's/[[:space:]]*\(\(\(-[46AaCfGgKkMNnqsTtVvXxYy]\)\|\(-[^[:space:]]*\([[:space:]]\+[^[:space:]]*\)\?\)\)[[:space:]]*\)*[[:space:]]\+\([^-][^[:space:]]*\).*/\6/')"
  fi

  command ssh "$@"

else
  # local config parsing
  has -v fzf awk tmux xpanes || return 1

  if [ ! -f $_SSH_CONFIG ]; then
    echo "$_SSH_CONFIG does not exist" >&2
    return 1
  fi


  targets=($(parse_config))
  if [ ${#targets[@]} -eq 1 ]; then
    # zsh array indexing starts at 1
    command ssh "${targets[1]}" "$@"
  elif [ ${#targets[@]} -gt 1 ]; then
    _index='INDEX=`tmux display -pt "${TMUX_PANE}" "#{pane_index}"`'
    xpanes -B "${_index}" -t -s -c "ssh -o StrictHostKeyChecking=no {} $*" "${targets[@]}"
  fi
fi
