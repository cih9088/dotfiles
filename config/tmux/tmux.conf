# cat << EOF > /dev/null
#
# Reference:
# - https://github.com/gpakosz/.tmux
# - https://github.com/junegunn/dotfiles
# - https://github.com/samoshkin/tmux-config
#
# Options:
# - Session options (set-option [-g])
# - Window options (set-window-option [-g])

# -------------------------------------------------------------------
# General
# -------------------------------------------------------------------

# Change bind key to ctrl-a
unbind-key c-b
set-option -g prefix c-a

# start windows numbering at 1
set-option -g base-index 1
# make pane numbering consistent with windows
set-window-option -g pane-base-index 1
# Renumber windows when a window is closed
set-option -g renumber-windows on

# History
set-option -g history-limit 102400

# faster command sequences
set-option -s escape-time 10
# Repeat time limit (ms)
set-option -g repeat-time 500

# tmux-256color instead of screen-256color enables italics
set -g default-terminal "tmux-256color"

# Tc/RGB enables true color
set -ga terminal-overrides ",*256col*:Tc:RGB"

# set -as terminal-overrides ',xterm*:sitm=\E[3m'

# Key binding in the status line (bind-key :)
set-option -g status-keys emacs

# Prevent from window renaming
set-option -g allow-rename off

# toggle mouse
bind m run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"

# # Prompt to rename window right after it's created
# set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# focus
# set -g focus-events on

# Allow escape sequence to be passed through tmux (new from 3.3)
if-shell -b '[ $(echo "$(tmux -V | grep -Eo "[0-9]+([.][0-9]+)?") >= 3.3" | bc) = 1 ]' \
  "set-option -g allow-passthrough on"


# -------------------------------------------------------------------
# Window options
# -------------------------------------------------------------------

# Copy-mode
set-window-option -g mode-keys vi

# -------------------------------------------------------------------
# Key bindings
# -------------------------------------------------------------------

# reload configuration
bind-key r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'

# prefix c
bind-key c new-window -c "#{pane_current_path}"

# window navigation
unbind-key n
unbind-key p
bind-key Tab last-window        # move to last active window
bind-key -r C-h previous-window # select previous window
bind-key -r C-l next-window     # select next window

# prefix a
bind-key a send-prefix

# Moving windows
bind-key -r > swap-window -t :+ \; select-window -n
bind-key -r < swap-window -t :- \; select-window -p

# Back and forth
bind-key Space next-layout # Overridden

# pane navigation
bind -r h select-pane -L  # move left
bind -r j select-pane -D  # move down
bind -r k select-pane -U  # move up
bind -r l select-pane -R  # move right
# bind > swap-pane -D       # swap current pane with the next one
# bind < swap-pane -U       # swap current pane with the previous one
# bind-key tab select-pane -t :.+
# bind-key btab select-pane -t :.-

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# split current window vertically
bind-key v split-window -h -c "#{pane_current_path}"
# split current window horizontally
bind-key s split-window -c "#{pane_current_path}"
unbind '"'
unbind %

# Synchronize panes
bind-key e set-window-option synchronize-pane \;\
    display-message "synchronize is now #{?pane_synchronized,on,off}"

# kill window
unbind &
bind X confirm-before -p "kill-window #W? (y/n)" kill-window

# maximize current pane
bind + run 'cut -c3- ~/.tmux.conf | sh -s _maximize_pane "#{session_name}" #D'

# -- copy mode -----------------------------------------------------------------
bind Enter copy-mode # enter copy mode

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'

# wrap default shell in reattach-to-user-namespace if available
# there is some hack with `exec & reattach`, credits to "https://github.com/gpakosz/.tmux"
# don't really understand how it works, but at least window are not renamed to "reattach-to-user-namespace"
if -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
     "run 'tmux set -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"


yank="$HOME/.tmux/yank.sh"

# Copy selected text
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi Y send-keys -X copy-line \;\
    run "tmux save-buffer - | $yank"
bind-key -T copy-mode-vi D send-keys -X copy-end-of-line \;\
    run "tmux save-buffer - | $yank"
bind-key -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
    run "tmux save-buffer - | $yank"

# Clear scrollback buffer
bind-key C-l send-keys C-l \; clear-history \; display-message "pane history cleared"

if-shell -b '[ $(echo "$(tmux -V | grep -Eo "[0-9]+([.][0-9]+)?") >= 3.2" | bc) = 1 ]' \
  "bind-key b display-popup -d '#{pane_current_path}' -E -h 75% -w 75% 'zsh'"

set-option -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY\
  BG_LUMINANCE\
  COLOUR_SCHEME"
bind '$' run "~/.tmux/renew_env.sh"


# -------------------------------------------------------------------
# Decoration (256-color)
# -------------------------------------------------------------------
mousemode_indicator=0

set-option -g status-justify left

set-option -g status-left-length 60
set-option -g status-right-length 60

set-option -g status-interval 60  # redraw status line every 60 seconds

set-option -g pane-border-status bottom
set-option -g pane-border-format " #{pane_index} #{pane_current_command} in #(echo '#{pane_current_path}' | awk -F '/' '{if(NF > 4){print \"‚Ä¶/\"$(NF-2)\"/\"$(NF-1)\"/\"$(NF)}else{print}}') "

set-option -g status-bg colour0

set-option -g status-left '#[bg=colour5]  ü§∑ #(whoami)@#h [#S] #[bg=colour0]   '

set-option -g window-status-format '#[bg=colour0]#[fg=colour15] üôà #I [#W/#F] '
set-option -g window-status-current-format '#[bg=colour15]#[fg=colour0,bold] üêµ #I [#W/#F] '

set-option -g status-right '#{?client_prefix,#[bg=colour0] #[bg=colour1] ^A #[bg=colour0] ,}\
#{?pane_in_mode,#[bg=colour=0] #[bg=colour2] COPY #[bg=colour0] ,}\
#{?mousemode_indicator,#[bg=colour0] #[bg=colour3] MOUSE #[bg=colour0] ,}\
#{?pane_synchronized,#[bg=colour0] #[bg=colour4] SYNC #[bg=colour0] ,}\
#[bg=colour5] üìÜ #(date "+%a %d %b %H:%M") '

run-shell "cut -c3- ~/.tmux.conf | sh -s _load_colour"


# -------------------------------------------------------------------
# fzf integration
# -------------------------------------------------------------------

# select-pane (@george-b)
bind-key 0 run "tmux split-window -l 12 'zsh -ci ftpane'"

# -------------------------------------------------------------------
# etc.
# -------------------------------------------------------------------

# # Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file $HOME/.tmux/tmux.conf.remote'

# see: toggle on/off all keybindings ¬∑ Issue #247 ¬∑ tmux/tmux - https://github.com/tmux/tmux/issues/247
bind -T root F12  \
     set-option prefix None \;\
     set-option key-table off \;\
     set-option status-left '' \;\
     set-option status-right '' \;\
     set-option -g status-position top \;\
     refresh-client -S \;\

bind -T off F12 \
     set-option -u prefix \;\
     set-option -u key-table \;\
     set-option -u status-left \;\
     set-option -u status-right \;\
     set-option -g status-position bottom \;\
     refresh-client -S

# TPM
set-option -g @resurrect-capture-pane-contents 'on'

set-option -g @fingers-jump-key G
set-option -g @fingers-main-action "$yank"
set-option -g @fingers-show-copied-notification 0

# @see https://github.com/tmux-plugins/tpm
set-option -g @plugin 'tmux-plugins/tpm'
set-option -g @plugin 'tmux-plugins/tmux-resurrect'
set-option -g @plugin 'tmux-plugins/tmux-continuum'
set-option -g @plugin 'Morantron/tmux-fingers'
run '~/.tmux/plugins/tpm/tpm'


# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# export LC_NUMERIC=C
#
# __newline='
# '
#
# _toggle_mouse() {
#   old=$(tmux show -gv mouse)
#   new=""
#
#   if [ "$old" = "on" ]; then
#     new="off"
#     tmux set-environment -g mousemode_indicator 0
#   else
#     new="on"
#     tmux set-environment -g mousemode_indicator 1
#   fi
#
#   tmux set -g mouse $new \;\
#        display "mouse mode is now $new"
# }
#
# _maximize_pane() {
#
#   currentver="$(tmux -V | awk '{print $2}')"
#   requiredver="2.8"
#   if ! [ "$(printf '%s\n' "$requiredver" "$currentver" | sort -V | head -n1)" = "$requiredver" ]; then
#       printf "this feature needs tmux version > 2.8"
#      return
#   fi
#
#   current_session=${1:-$(tmux display -p '#{session_name}')}
#   current_pane=${2:-$(tmux display -p '#{pane_id}')}
#
#   dead_panes=$(tmux list-panes -s -t "$current_session" -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -o '^1 %.\+maximized.\+$' || true)
#   restore=$(echo "$dead_panes" | sed -n -E -e "s/^1 $current_pane .+maximized.+'(%[0-9]+)'$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t $current_pane/p" -e "s/^1 (%[0-9]+) .+maximized.+'$current_pane'$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t \1/p" )
#
#   if [ -z "$restore" ]; then
#     [ "$(tmux list-panes -t "$current_session:" | wc -l | sed 's/^ *//g')" -eq 1 ] && tmux display "Can't maximize with only one pane" && return
#     window=$(tmux new-window -t "$current_session:" -P "exec maximized... 2> /dev/null & tmux setw -t \"$current_session:\" remain-on-exit on; printf \"Pane has been maximized, press <prefix>+ to restore. %s\" '$current_pane'")
#     window=${window%.*}
#
#     retry=10
#     while [ x"$(tmux list-panes -t "$window" -F '#{session_name}:#{window_index} #{pane_dead}' 2>/dev/null)" != x"$window 1" ] && [ "$retry" -ne 0 ]; do
#       sleep 0.05
#       retry=$((retry - 1))
#     done
#     if [ "$retry" -eq 0 ]; then
#       tmux display 'Unable to maximize pane'
#     fi
#
#     new_pane=$(tmux display -t "$window" -p '#{pane_id}')
#     tmux setw -t "$window" remain-on-exit off \; swap-pane -s "$current_pane" -t "$new_pane"
#   else
#     $restore || tmux kill-pane
#   fi
# }
#
# _load_colour() {
#   if [ -f $HOME/.tmux/color.$COLOUR_SCHEME.conf ]; then
#     tmux source-file $HOME/.tmux/color.$COLOUR_SCHEME.conf
#   else
#     if [ ! -z $BG_LUMINANCE ]; then
#       tmux source-file $HOME/.tmux/color.$BG_LUMINANCE.conf
#     else
#       tmux source-file $HOME/.tmux/color.dark.conf
#     fi
#   fi
# }
#
#
# "$@"
